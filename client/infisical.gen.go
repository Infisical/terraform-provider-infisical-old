// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	ApiKeyAuthScopes = "apiKeyAuth.Scopes"
)

// Defines values for GetApiV1WorkspaceWorkspaceIdLogsParamsSortBy.
const (
	Oldest GetApiV1WorkspaceWorkspaceIdLogsParamsSortBy = "oldest"
	Recent GetApiV1WorkspaceWorkspaceIdLogsParamsSortBy = "recent"
)

// CreateSecret defines model for CreateSecret.
type CreateSecret struct {
	SecretCommentCiphertext *string `json:"secretCommentCiphertext,omitempty"`
	SecretCommentIV         *string `json:"secretCommentIV,omitempty"`
	SecretCommentTag        *string `json:"secretCommentTag,omitempty"`
	SecretKeyCiphertext     *string `json:"secretKeyCiphertext,omitempty"`
	SecretKeyIV             *string `json:"secretKeyIV,omitempty"`
	SecretKeyTag            *string `json:"secretKeyTag,omitempty"`
	SecretValueCiphertext   *string `json:"secretValueCiphertext,omitempty"`
	SecretValueIV           *string `json:"secretValueIV,omitempty"`
	SecretValueTag          *string `json:"secretValueTag,omitempty"`
	Type                    *string `json:"type,omitempty"`
}

// CurrentUser defines model for CurrentUser.
type CurrentUser struct {
	Id                  *string `json:"_id,omitempty"`
	CreatedAt           *string `json:"createdAt,omitempty"`
	Email               *string `json:"email,omitempty"`
	EncryptedPrivateKey *string `json:"encryptedPrivateKey,omitempty"`
	FirstName           *string `json:"firstName,omitempty"`
	Iv                  *string `json:"iv,omitempty"`
	LastName            *string `json:"lastName,omitempty"`
	PublicKey           *string `json:"publicKey,omitempty"`
	Tag                 *string `json:"tag,omitempty"`
	UpdatedAt           *string `json:"updatedAt,omitempty"`
}

// Log defines model for Log.
type Log struct {
	Id          *string   `json:"_id,omitempty"`
	ActionNames *[]string `json:"actionNames,omitempty"`
	Actions     *[]struct {
		Name    *string `json:"name,omitempty"`
		Payload *[]struct {
			NewSecretVersion *string `json:"newSecretVersion,omitempty"`
			OldSecretVersion *string `json:"oldSecretVersion,omitempty"`
		} `json:"payload,omitempty"`
		User      *string `json:"user,omitempty"`
		Workspace *string `json:"workspace,omitempty"`
	} `json:"actions,omitempty"`
	Channel   *string `json:"channel,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	IpAddress *string `json:"ipAddress,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	User      *struct {
		Id        *string `json:"_id,omitempty"`
		Email     *string `json:"email,omitempty"`
		FirstName *string `json:"firstName,omitempty"`
		LastName  *string `json:"lastName,omitempty"`
	} `json:"user,omitempty"`
	Workspace *string `json:"workspace,omitempty"`
}

// Membership defines model for Membership.
type Membership struct {
	Role *string `json:"role,omitempty"`
	User *struct {
		Id        *string `json:"_id,omitempty"`
		CreatedAt *string `json:"createdAt,omitempty"`
		Email     *string `json:"email,omitempty"`
		FirstName *string `json:"firstName,omitempty"`
		LastName  *string `json:"lastName,omitempty"`
		PublicKey *string `json:"publicKey,omitempty"`
		UpdatedAt *string `json:"updatedAt,omitempty"`
	} `json:"user,omitempty"`
	Workspace *string `json:"workspace,omitempty"`
}

// MembershipOrg defines model for MembershipOrg.
type MembershipOrg struct {
	Organization *string `json:"organization,omitempty"`
	Role         *string `json:"role,omitempty"`
	Status       *string `json:"status,omitempty"`
	User         *struct {
		Id        *string `json:"_id,omitempty"`
		CreatedAt *string `json:"createdAt,omitempty"`
		Email     *string `json:"email,omitempty"`
		FirstName *string `json:"firstName,omitempty"`
		LastName  *string `json:"lastName,omitempty"`
		PublicKey *string `json:"publicKey,omitempty"`
		UpdatedAt *string `json:"updatedAt,omitempty"`
	} `json:"user,omitempty"`
}

// Organization defines model for Organization.
type Organization struct {
	Id         *string `json:"_id,omitempty"`
	CustomerId *string `json:"customerId,omitempty"`
	Name       *string `json:"name,omitempty"`
}

// Project defines model for Project.
type Project struct {
	Environments *[]struct {
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"environments,omitempty"`
	Name         *string `json:"name,omitempty"`
	Organization *string `json:"organization,omitempty"`
}

// ProjectKey defines model for ProjectKey.
type ProjectKey struct {
	Encryptedkey *string `json:"encryptedkey,omitempty"`
	Nonce        *string `json:"nonce,omitempty"`
	Receiver     *string `json:"receiver,omitempty"`
	Sender       *struct {
		PublicKey *string `json:"publicKey,omitempty"`
	} `json:"sender,omitempty"`
	Workspace *string `json:"workspace,omitempty"`
}

// Secret defines model for Secret.
type Secret struct {
	Id                      *string      `json:"_id,omitempty"`
	CreatedAt               *string      `json:"createdAt,omitempty"`
	SecretCommentCiphertext *string      `json:"secretCommentCiphertext,omitempty"`
	SecretCommentIV         *string      `json:"secretCommentIV,omitempty"`
	SecretCommentTag        *string      `json:"secretCommentTag,omitempty"`
	SecretKeyCiphertext     *string      `json:"secretKeyCiphertext,omitempty"`
	SecretKeyIV             *string      `json:"secretKeyIV,omitempty"`
	SecretKeyTag            *string      `json:"secretKeyTag,omitempty"`
	SecretValueCiphertext   *string      `json:"secretValueCiphertext,omitempty"`
	SecretValueIV           *string      `json:"secretValueIV,omitempty"`
	SecretValueTag          *string      `json:"secretValueTag,omitempty"`
	Type                    *string      `json:"type,omitempty"`
	UpdatedAt               *string      `json:"updatedAt,omitempty"`
	User                    *interface{} `json:"user,omitempty"`
	Version                 *float32     `json:"version,omitempty"`
	Workspace               *string      `json:"workspace,omitempty"`
}

// SecretSnapshot defines model for SecretSnapshot.
type SecretSnapshot struct {
	SecretVersions *[]struct {
		Id *string `json:"_id,omitempty"`
	} `json:"secretVersions,omitempty"`
	Version   *float32 `json:"version,omitempty"`
	Workspace *string  `json:"workspace,omitempty"`
}

// SecretVersion defines model for SecretVersion.
type SecretVersion struct {
	Id                    *string  `json:"_id,omitempty"`
	Environment           *string  `json:"environment,omitempty"`
	IsDeleted             *string  `json:"isDeleted,omitempty"`
	Secret                *string  `json:"secret,omitempty"`
	SecretKeyCiphertext   *string  `json:"secretKeyCiphertext,omitempty"`
	SecretKeyIV           *string  `json:"secretKeyIV,omitempty"`
	SecretKeyTag          *string  `json:"secretKeyTag,omitempty"`
	SecretValueCiphertext *string  `json:"secretValueCiphertext,omitempty"`
	SecretValueIV         *string  `json:"secretValueIV,omitempty"`
	SecretValueTag        *string  `json:"secretValueTag,omitempty"`
	Type                  *string  `json:"type,omitempty"`
	User                  *string  `json:"user,omitempty"`
	Version               *float32 `json:"version,omitempty"`
	Workspace             *string  `json:"workspace,omitempty"`
}

// UpdateSecret defines model for UpdateSecret.
type UpdateSecret struct {
	Id                      *string `json:"id,omitempty"`
	SecretCommentCiphertext *string `json:"secretCommentCiphertext,omitempty"`
	SecretCommentIV         *string `json:"secretCommentIV,omitempty"`
	SecretCommentTag        *string `json:"secretCommentTag,omitempty"`
	SecretKeyCiphertext     *string `json:"secretKeyCiphertext,omitempty"`
	SecretKeyIV             *string `json:"secretKeyIV,omitempty"`
	SecretKeyTag            *string `json:"secretKeyTag,omitempty"`
	SecretValueCiphertext   *string `json:"secretValueCiphertext,omitempty"`
	SecretValueIV           *string `json:"secretValueIV,omitempty"`
	SecretValueTag          *string `json:"secretValueTag,omitempty"`
}

// PostApiV1AuthLogin1JSONBody defines parameters for PostApiV1AuthLogin1.
type PostApiV1AuthLogin1JSONBody struct {
	ClientPublicKey *interface{} `json:"clientPublicKey,omitempty"`
	Email           *interface{} `json:"email,omitempty"`
}

// PostApiV1AuthLogin2JSONBody defines parameters for PostApiV1AuthLogin2.
type PostApiV1AuthLogin2JSONBody struct {
	ClientProof *interface{} `json:"clientProof,omitempty"`
	Email       *interface{} `json:"email,omitempty"`
}

// PatchApiV1BotBotIdActiveJSONBody defines parameters for PatchApiV1BotBotIdActive.
type PatchApiV1BotBotIdActiveJSONBody struct {
	BotKey   *interface{} `json:"botKey,omitempty"`
	IsActive *interface{} `json:"isActive,omitempty"`
}

// PostApiV1IntegrationAuthOauthTokenJSONBody defines parameters for PostApiV1IntegrationAuthOauthToken.
type PostApiV1IntegrationAuthOauthTokenJSONBody struct {
	Code        *interface{} `json:"code,omitempty"`
	Integration *interface{} `json:"integration,omitempty"`
	WorkspaceId *interface{} `json:"workspaceId,omitempty"`
}

// PatchApiV1IntegrationIntegrationIdJSONBody defines parameters for PatchApiV1IntegrationIntegrationId.
type PatchApiV1IntegrationIntegrationIdJSONBody struct {
	App         *interface{} `json:"app,omitempty"`
	Context     *interface{} `json:"context,omitempty"`
	Environment *interface{} `json:"environment,omitempty"`
	IsActive    *interface{} `json:"isActive,omitempty"`
	SiteId      *interface{} `json:"siteId,omitempty"`
	Target      *interface{} `json:"target,omitempty"`
}

// PostApiV1InviteOrgSignupJSONBody defines parameters for PostApiV1InviteOrgSignup.
type PostApiV1InviteOrgSignupJSONBody struct {
	InviteeEmail   *interface{} `json:"inviteeEmail,omitempty"`
	OrganizationId *interface{} `json:"organizationId,omitempty"`
}

// PostApiV1InviteOrgVerifyJSONBody defines parameters for PostApiV1InviteOrgVerify.
type PostApiV1InviteOrgVerifyJSONBody struct {
	Code  *interface{} `json:"code,omitempty"`
	Email *interface{} `json:"email,omitempty"`
}

// PostApiV1KeyWorkspaceIdJSONBody defines parameters for PostApiV1KeyWorkspaceId.
type PostApiV1KeyWorkspaceIdJSONBody struct {
	Key *interface{} `json:"key,omitempty"`
}

// PostApiV1MembershipMembershipIdChangeRoleJSONBody defines parameters for PostApiV1MembershipMembershipIdChangeRole.
type PostApiV1MembershipMembershipIdChangeRoleJSONBody struct {
	Role *interface{} `json:"role,omitempty"`
}

// PostApiV1OrganizationJSONBody defines parameters for PostApiV1Organization.
type PostApiV1OrganizationJSONBody struct {
	OrganizationName *interface{} `json:"organizationName,omitempty"`
}

// DeleteApiV1OrganizationOrganizationIdIncidentContactOrgJSONBody defines parameters for DeleteApiV1OrganizationOrganizationIdIncidentContactOrg.
type DeleteApiV1OrganizationOrganizationIdIncidentContactOrgJSONBody struct {
	Email *interface{} `json:"email,omitempty"`
}

// PostApiV1OrganizationOrganizationIdIncidentContactOrgJSONBody defines parameters for PostApiV1OrganizationOrganizationIdIncidentContactOrg.
type PostApiV1OrganizationOrganizationIdIncidentContactOrgJSONBody struct {
	Email *interface{} `json:"email,omitempty"`
}

// PatchApiV1OrganizationOrganizationIdNameJSONBody defines parameters for PatchApiV1OrganizationOrganizationIdName.
type PatchApiV1OrganizationOrganizationIdNameJSONBody struct {
	Name *interface{} `json:"name,omitempty"`
}

// PostApiV1PasswordBackupPrivateKeyJSONBody defines parameters for PostApiV1PasswordBackupPrivateKey.
type PostApiV1PasswordBackupPrivateKeyJSONBody struct {
	ClientProof         *interface{} `json:"clientProof,omitempty"`
	EncryptedPrivateKey *interface{} `json:"encryptedPrivateKey,omitempty"`
	Iv                  *interface{} `json:"iv,omitempty"`
	Salt                *interface{} `json:"salt,omitempty"`
	Tag                 *interface{} `json:"tag,omitempty"`
	Verifier            *interface{} `json:"verifier,omitempty"`
}

// PostApiV1PasswordChangePasswordJSONBody defines parameters for PostApiV1PasswordChangePassword.
type PostApiV1PasswordChangePasswordJSONBody struct {
	ClientProof         *interface{} `json:"clientProof,omitempty"`
	EncryptedPrivateKey *interface{} `json:"encryptedPrivateKey,omitempty"`
	Iv                  *interface{} `json:"iv,omitempty"`
	Salt                *interface{} `json:"salt,omitempty"`
	Tag                 *interface{} `json:"tag,omitempty"`
	Verifier            *interface{} `json:"verifier,omitempty"`
}

// PostApiV1PasswordEmailPasswordResetJSONBody defines parameters for PostApiV1PasswordEmailPasswordReset.
type PostApiV1PasswordEmailPasswordResetJSONBody struct {
	Email *interface{} `json:"email,omitempty"`
}

// PostApiV1PasswordEmailPasswordResetVerifyJSONBody defines parameters for PostApiV1PasswordEmailPasswordResetVerify.
type PostApiV1PasswordEmailPasswordResetVerifyJSONBody struct {
	Code  *interface{} `json:"code,omitempty"`
	Email *interface{} `json:"email,omitempty"`
}

// PostApiV1PasswordPasswordResetJSONBody defines parameters for PostApiV1PasswordPasswordReset.
type PostApiV1PasswordPasswordResetJSONBody struct {
	EncryptedPrivateKey *interface{} `json:"encryptedPrivateKey,omitempty"`
	Iv                  *interface{} `json:"iv,omitempty"`
	Salt                *interface{} `json:"salt,omitempty"`
	Tag                 *interface{} `json:"tag,omitempty"`
	Verifier            *interface{} `json:"verifier,omitempty"`
}

// PostApiV1PasswordSrp1JSONBody defines parameters for PostApiV1PasswordSrp1.
type PostApiV1PasswordSrp1JSONBody struct {
	ClientPublicKey *interface{} `json:"clientPublicKey,omitempty"`
}

// GetApiV1SecretSecretIdSecretVersionsParams defines parameters for GetApiV1SecretSecretIdSecretVersions.
type GetApiV1SecretSecretIdSecretVersionsParams struct {
	// Offset Number of versions to skip
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of versions to return
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostApiV1SecretSecretIdSecretVersionsRollbackJSONBody defines parameters for PostApiV1SecretSecretIdSecretVersionsRollback.
type PostApiV1SecretSecretIdSecretVersionsRollbackJSONBody struct {
	// Version Version of secret to roll back to
	Version *int `json:"version,omitempty"`
}

// GetApiV1SecretWorkspaceIdParams defines parameters for GetApiV1SecretWorkspaceId.
type GetApiV1SecretWorkspaceIdParams struct {
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
	Channel     *string `form:"channel,omitempty" json:"channel,omitempty"`
}

// PostApiV1SecretWorkspaceIdJSONBody defines parameters for PostApiV1SecretWorkspaceId.
type PostApiV1SecretWorkspaceIdJSONBody struct {
	Channel     *interface{} `json:"channel,omitempty"`
	Environment *interface{} `json:"environment,omitempty"`
	Keys        *interface{} `json:"keys,omitempty"`
	Secrets     *interface{} `json:"secrets,omitempty"`
}

// GetApiV1SecretWorkspaceIdServiceTokenParams defines parameters for GetApiV1SecretWorkspaceIdServiceToken.
type GetApiV1SecretWorkspaceIdServiceTokenParams struct {
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
	Channel     *string `form:"channel,omitempty" json:"channel,omitempty"`
}

// PostApiV1ServiceTokenJSONBody defines parameters for PostApiV1ServiceToken.
type PostApiV1ServiceTokenJSONBody struct {
	EncryptedKey *interface{} `json:"encryptedKey,omitempty"`
	Environment  *interface{} `json:"environment,omitempty"`
	ExpiresIn    *interface{} `json:"expiresIn,omitempty"`
	Name         *interface{} `json:"name,omitempty"`
	Nonce        *interface{} `json:"nonce,omitempty"`
	PublicKey    *interface{} `json:"publicKey,omitempty"`
	WorkspaceId  *interface{} `json:"workspaceId,omitempty"`
}

// PostApiV1SignupCompleteAccountInviteJSONBody defines parameters for PostApiV1SignupCompleteAccountInvite.
type PostApiV1SignupCompleteAccountInviteJSONBody struct {
	Email               *interface{} `json:"email,omitempty"`
	EncryptedPrivateKey *interface{} `json:"encryptedPrivateKey,omitempty"`
	FirstName           *interface{} `json:"firstName,omitempty"`
	Iv                  *interface{} `json:"iv,omitempty"`
	LastName            *interface{} `json:"lastName,omitempty"`
	PublicKey           *interface{} `json:"publicKey,omitempty"`
	Salt                *interface{} `json:"salt,omitempty"`
	Tag                 *interface{} `json:"tag,omitempty"`
	Verifier            *interface{} `json:"verifier,omitempty"`
}

// PostApiV1SignupCompleteAccountSignupJSONBody defines parameters for PostApiV1SignupCompleteAccountSignup.
type PostApiV1SignupCompleteAccountSignupJSONBody struct {
	Email               *interface{} `json:"email,omitempty"`
	EncryptedPrivateKey *interface{} `json:"encryptedPrivateKey,omitempty"`
	FirstName           *interface{} `json:"firstName,omitempty"`
	Iv                  *interface{} `json:"iv,omitempty"`
	LastName            *interface{} `json:"lastName,omitempty"`
	OrganizationName    *interface{} `json:"organizationName,omitempty"`
	PublicKey           *interface{} `json:"publicKey,omitempty"`
	Salt                *interface{} `json:"salt,omitempty"`
	Tag                 *interface{} `json:"tag,omitempty"`
	Verifier            *interface{} `json:"verifier,omitempty"`
}

// PostApiV1SignupEmailSignupJSONBody defines parameters for PostApiV1SignupEmailSignup.
type PostApiV1SignupEmailSignupJSONBody struct {
	Email *interface{} `json:"email,omitempty"`
}

// PostApiV1SignupEmailVerifyJSONBody defines parameters for PostApiV1SignupEmailVerify.
type PostApiV1SignupEmailVerifyJSONBody struct {
	Code  *interface{} `json:"code,omitempty"`
	Email *interface{} `json:"email,omitempty"`
}

// PostApiV1StripeWebhookParams defines parameters for PostApiV1StripeWebhook.
type PostApiV1StripeWebhookParams struct {
	StripeSignature *string `json:"stripe-signature,omitempty"`
}

// GetApiV1UserActionParams defines parameters for GetApiV1UserAction.
type GetApiV1UserActionParams struct {
	Action *string `form:"action,omitempty" json:"action,omitempty"`
}

// PostApiV1UserActionJSONBody defines parameters for PostApiV1UserAction.
type PostApiV1UserActionJSONBody struct {
	Action *interface{} `json:"action,omitempty"`
}

// PostApiV1WorkspaceJSONBody defines parameters for PostApiV1Workspace.
type PostApiV1WorkspaceJSONBody struct {
	OrganizationId *interface{} `json:"organizationId,omitempty"`
	WorkspaceName  *interface{} `json:"workspaceName,omitempty"`
}

// PostApiV1WorkspaceWorkspaceIdInviteSignupJSONBody defines parameters for PostApiV1WorkspaceWorkspaceIdInviteSignup.
type PostApiV1WorkspaceWorkspaceIdInviteSignupJSONBody struct {
	Email *interface{} `json:"email,omitempty"`
}

// GetApiV1WorkspaceWorkspaceIdLogsParams defines parameters for GetApiV1WorkspaceWorkspaceIdLogs.
type GetApiV1WorkspaceWorkspaceIdLogsParams struct {
	// UserId ID of project member
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`

	// Offset Number of logs to skip
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of logs to return
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// SortBy Order to sort the logs by
	SortBy *GetApiV1WorkspaceWorkspaceIdLogsParamsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// ActionNames Names of log actions (comma-separated)
	ActionNames *string `form:"actionNames,omitempty" json:"actionNames,omitempty"`
}

// GetApiV1WorkspaceWorkspaceIdLogsParamsSortBy defines parameters for GetApiV1WorkspaceWorkspaceIdLogs.
type GetApiV1WorkspaceWorkspaceIdLogsParamsSortBy string

// PostApiV1WorkspaceWorkspaceIdNameJSONBody defines parameters for PostApiV1WorkspaceWorkspaceIdName.
type PostApiV1WorkspaceWorkspaceIdNameJSONBody struct {
	Name *interface{} `json:"name,omitempty"`
}

// GetApiV1WorkspaceWorkspaceIdSecretSnapshotsParams defines parameters for GetApiV1WorkspaceWorkspaceIdSecretSnapshots.
type GetApiV1WorkspaceWorkspaceIdSecretSnapshotsParams struct {
	// Offset Number of secret snapshots to skip
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of secret snapshots to return
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackJSONBody defines parameters for PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollback.
type PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackJSONBody struct {
	// Version Version of secret snapshot to roll back to
	Version *int `json:"version,omitempty"`
}

// PostApiV2ApiKeyJSONBody defines parameters for PostApiV2ApiKey.
type PostApiV2ApiKeyJSONBody struct {
	ExpiresIn *interface{} `json:"expiresIn,omitempty"`
	Name      *interface{} `json:"name,omitempty"`
}

// PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdJSONBody defines parameters for PatchApiV2OrganizationsOrganizationIdMembershipsMembershipId.
type PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdJSONBody struct {
	// Role Role of organization membership - either owner, admin, or member
	Role *string `json:"role,omitempty"`
}

// PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentJSONBody defines parameters for PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironment.
type PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentJSONBody struct {
	Secrets *interface{} `json:"secrets,omitempty"`
}

// PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONBody defines parameters for PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentName.
type PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONBody struct {
	Secrets *interface{} `json:"secrets,omitempty"`
}

// DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONBody defines parameters for DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentName.
type DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONBody struct {
	SecretIds *interface{} `json:"secretIds,omitempty"`
}

// GetApiV2SecretWorkspaceWorkspaceIdParams defines parameters for GetApiV2SecretWorkspaceWorkspaceId.
type GetApiV2SecretWorkspaceWorkspaceIdParams struct {
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONBody defines parameters for PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentName.
type PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONBody struct {
	Secret *interface{} `json:"secret,omitempty"`
}

// PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentJSONBody defines parameters for PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironment.
type PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentJSONBody struct {
	Secret *interface{} `json:"secret,omitempty"`
}

// DeleteApiV2SecretsJSONBody defines parameters for DeleteApiV2Secrets.
type DeleteApiV2SecretsJSONBody struct {
	// SecretIds ID(s) of secrets - string or array of strings
	SecretIds *string `json:"secretIds,omitempty"`
}

// GetApiV2SecretsParams defines parameters for GetApiV2Secrets.
type GetApiV2SecretsParams struct {
	// WorkspaceId ID of project
	WorkspaceId string `form:"workspaceId" json:"workspaceId"`

	// Environment Environment within project
	Environment string  `form:"environment" json:"environment"`
	Content     *string `form:"content,omitempty" json:"content,omitempty"`
}

// PatchApiV2SecretsJSONBody defines parameters for PatchApiV2Secrets.
type PatchApiV2SecretsJSONBody struct {
	Secrets *UpdateSecret `json:"secrets,omitempty"`
}

// PostApiV2SecretsJSONBody defines parameters for PostApiV2Secrets.
type PostApiV2SecretsJSONBody struct {
	// Environment Environment within project
	Environment *string       `json:"environment,omitempty"`
	Secrets     *CreateSecret `json:"secrets,omitempty"`

	// WorkspaceId ID of project
	WorkspaceId *string `json:"workspaceId,omitempty"`
}

// PostApiV2ServiceTokenJSONBody defines parameters for PostApiV2ServiceToken.
type PostApiV2ServiceTokenJSONBody struct {
	EncryptedKey *interface{} `json:"encryptedKey,omitempty"`
	Environment  *interface{} `json:"environment,omitempty"`
	ExpiresIn    *interface{} `json:"expiresIn,omitempty"`
	Iv           *interface{} `json:"iv,omitempty"`
	Name         *interface{} `json:"name,omitempty"`
	Tag          *interface{} `json:"tag,omitempty"`
	WorkspaceId  *interface{} `json:"workspaceId,omitempty"`
}

// DeleteApiV2WorkspaceWorkspaceIdEnvironmentsJSONBody defines parameters for DeleteApiV2WorkspaceWorkspaceIdEnvironments.
type DeleteApiV2WorkspaceWorkspaceIdEnvironmentsJSONBody struct {
	EnvironmentSlug *interface{} `json:"environmentSlug,omitempty"`
}

// PostApiV2WorkspaceWorkspaceIdEnvironmentsJSONBody defines parameters for PostApiV2WorkspaceWorkspaceIdEnvironments.
type PostApiV2WorkspaceWorkspaceIdEnvironmentsJSONBody struct {
	EnvironmentName *interface{} `json:"environmentName,omitempty"`
	EnvironmentSlug *interface{} `json:"environmentSlug,omitempty"`
}

// PutApiV2WorkspaceWorkspaceIdEnvironmentsJSONBody defines parameters for PutApiV2WorkspaceWorkspaceIdEnvironments.
type PutApiV2WorkspaceWorkspaceIdEnvironmentsJSONBody struct {
	EnvironmentName    *interface{} `json:"environmentName,omitempty"`
	EnvironmentSlug    *interface{} `json:"environmentSlug,omitempty"`
	OldEnvironmentSlug *interface{} `json:"oldEnvironmentSlug,omitempty"`
}

// PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdJSONBody defines parameters for PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipId.
type PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdJSONBody struct {
	// Role Role of membership - either admin or member
	Role *string `json:"role,omitempty"`
}

// GetApiV2WorkspaceWorkspaceIdSecretsParams defines parameters for GetApiV2WorkspaceWorkspaceIdSecrets.
type GetApiV2WorkspaceWorkspaceIdSecretsParams struct {
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
	Channel     *string `form:"channel,omitempty" json:"channel,omitempty"`
}

// PostApiV2WorkspaceWorkspaceIdSecretsJSONBody defines parameters for PostApiV2WorkspaceWorkspaceIdSecrets.
type PostApiV2WorkspaceWorkspaceIdSecretsJSONBody struct {
	Channel     *interface{} `json:"channel,omitempty"`
	Environment *interface{} `json:"environment,omitempty"`
	Keys        *interface{} `json:"keys,omitempty"`
	Secrets     *interface{} `json:"secrets,omitempty"`
}

// PostApiV1AuthLogin1JSONRequestBody defines body for PostApiV1AuthLogin1 for application/json ContentType.
type PostApiV1AuthLogin1JSONRequestBody PostApiV1AuthLogin1JSONBody

// PostApiV1AuthLogin2JSONRequestBody defines body for PostApiV1AuthLogin2 for application/json ContentType.
type PostApiV1AuthLogin2JSONRequestBody PostApiV1AuthLogin2JSONBody

// PatchApiV1BotBotIdActiveJSONRequestBody defines body for PatchApiV1BotBotIdActive for application/json ContentType.
type PatchApiV1BotBotIdActiveJSONRequestBody PatchApiV1BotBotIdActiveJSONBody

// PostApiV1IntegrationAuthOauthTokenJSONRequestBody defines body for PostApiV1IntegrationAuthOauthToken for application/json ContentType.
type PostApiV1IntegrationAuthOauthTokenJSONRequestBody PostApiV1IntegrationAuthOauthTokenJSONBody

// PatchApiV1IntegrationIntegrationIdJSONRequestBody defines body for PatchApiV1IntegrationIntegrationId for application/json ContentType.
type PatchApiV1IntegrationIntegrationIdJSONRequestBody PatchApiV1IntegrationIntegrationIdJSONBody

// PostApiV1InviteOrgSignupJSONRequestBody defines body for PostApiV1InviteOrgSignup for application/json ContentType.
type PostApiV1InviteOrgSignupJSONRequestBody PostApiV1InviteOrgSignupJSONBody

// PostApiV1InviteOrgVerifyJSONRequestBody defines body for PostApiV1InviteOrgVerify for application/json ContentType.
type PostApiV1InviteOrgVerifyJSONRequestBody PostApiV1InviteOrgVerifyJSONBody

// PostApiV1KeyWorkspaceIdJSONRequestBody defines body for PostApiV1KeyWorkspaceId for application/json ContentType.
type PostApiV1KeyWorkspaceIdJSONRequestBody PostApiV1KeyWorkspaceIdJSONBody

// PostApiV1MembershipMembershipIdChangeRoleJSONRequestBody defines body for PostApiV1MembershipMembershipIdChangeRole for application/json ContentType.
type PostApiV1MembershipMembershipIdChangeRoleJSONRequestBody PostApiV1MembershipMembershipIdChangeRoleJSONBody

// PostApiV1OrganizationJSONRequestBody defines body for PostApiV1Organization for application/json ContentType.
type PostApiV1OrganizationJSONRequestBody PostApiV1OrganizationJSONBody

// DeleteApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody defines body for DeleteApiV1OrganizationOrganizationIdIncidentContactOrg for application/json ContentType.
type DeleteApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody DeleteApiV1OrganizationOrganizationIdIncidentContactOrgJSONBody

// PostApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody defines body for PostApiV1OrganizationOrganizationIdIncidentContactOrg for application/json ContentType.
type PostApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody PostApiV1OrganizationOrganizationIdIncidentContactOrgJSONBody

// PatchApiV1OrganizationOrganizationIdNameJSONRequestBody defines body for PatchApiV1OrganizationOrganizationIdName for application/json ContentType.
type PatchApiV1OrganizationOrganizationIdNameJSONRequestBody PatchApiV1OrganizationOrganizationIdNameJSONBody

// PostApiV1PasswordBackupPrivateKeyJSONRequestBody defines body for PostApiV1PasswordBackupPrivateKey for application/json ContentType.
type PostApiV1PasswordBackupPrivateKeyJSONRequestBody PostApiV1PasswordBackupPrivateKeyJSONBody

// PostApiV1PasswordChangePasswordJSONRequestBody defines body for PostApiV1PasswordChangePassword for application/json ContentType.
type PostApiV1PasswordChangePasswordJSONRequestBody PostApiV1PasswordChangePasswordJSONBody

// PostApiV1PasswordEmailPasswordResetJSONRequestBody defines body for PostApiV1PasswordEmailPasswordReset for application/json ContentType.
type PostApiV1PasswordEmailPasswordResetJSONRequestBody PostApiV1PasswordEmailPasswordResetJSONBody

// PostApiV1PasswordEmailPasswordResetVerifyJSONRequestBody defines body for PostApiV1PasswordEmailPasswordResetVerify for application/json ContentType.
type PostApiV1PasswordEmailPasswordResetVerifyJSONRequestBody PostApiV1PasswordEmailPasswordResetVerifyJSONBody

// PostApiV1PasswordPasswordResetJSONRequestBody defines body for PostApiV1PasswordPasswordReset for application/json ContentType.
type PostApiV1PasswordPasswordResetJSONRequestBody PostApiV1PasswordPasswordResetJSONBody

// PostApiV1PasswordSrp1JSONRequestBody defines body for PostApiV1PasswordSrp1 for application/json ContentType.
type PostApiV1PasswordSrp1JSONRequestBody PostApiV1PasswordSrp1JSONBody

// PostApiV1SecretSecretIdSecretVersionsRollbackJSONRequestBody defines body for PostApiV1SecretSecretIdSecretVersionsRollback for application/json ContentType.
type PostApiV1SecretSecretIdSecretVersionsRollbackJSONRequestBody PostApiV1SecretSecretIdSecretVersionsRollbackJSONBody

// PostApiV1SecretWorkspaceIdJSONRequestBody defines body for PostApiV1SecretWorkspaceId for application/json ContentType.
type PostApiV1SecretWorkspaceIdJSONRequestBody PostApiV1SecretWorkspaceIdJSONBody

// PostApiV1ServiceTokenJSONRequestBody defines body for PostApiV1ServiceToken for application/json ContentType.
type PostApiV1ServiceTokenJSONRequestBody PostApiV1ServiceTokenJSONBody

// PostApiV1SignupCompleteAccountInviteJSONRequestBody defines body for PostApiV1SignupCompleteAccountInvite for application/json ContentType.
type PostApiV1SignupCompleteAccountInviteJSONRequestBody PostApiV1SignupCompleteAccountInviteJSONBody

// PostApiV1SignupCompleteAccountSignupJSONRequestBody defines body for PostApiV1SignupCompleteAccountSignup for application/json ContentType.
type PostApiV1SignupCompleteAccountSignupJSONRequestBody PostApiV1SignupCompleteAccountSignupJSONBody

// PostApiV1SignupEmailSignupJSONRequestBody defines body for PostApiV1SignupEmailSignup for application/json ContentType.
type PostApiV1SignupEmailSignupJSONRequestBody PostApiV1SignupEmailSignupJSONBody

// PostApiV1SignupEmailVerifyJSONRequestBody defines body for PostApiV1SignupEmailVerify for application/json ContentType.
type PostApiV1SignupEmailVerifyJSONRequestBody PostApiV1SignupEmailVerifyJSONBody

// PostApiV1UserActionJSONRequestBody defines body for PostApiV1UserAction for application/json ContentType.
type PostApiV1UserActionJSONRequestBody PostApiV1UserActionJSONBody

// PostApiV1WorkspaceJSONRequestBody defines body for PostApiV1Workspace for application/json ContentType.
type PostApiV1WorkspaceJSONRequestBody PostApiV1WorkspaceJSONBody

// PostApiV1WorkspaceWorkspaceIdInviteSignupJSONRequestBody defines body for PostApiV1WorkspaceWorkspaceIdInviteSignup for application/json ContentType.
type PostApiV1WorkspaceWorkspaceIdInviteSignupJSONRequestBody PostApiV1WorkspaceWorkspaceIdInviteSignupJSONBody

// PostApiV1WorkspaceWorkspaceIdNameJSONRequestBody defines body for PostApiV1WorkspaceWorkspaceIdName for application/json ContentType.
type PostApiV1WorkspaceWorkspaceIdNameJSONRequestBody PostApiV1WorkspaceWorkspaceIdNameJSONBody

// PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackJSONRequestBody defines body for PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollback for application/json ContentType.
type PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackJSONRequestBody PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackJSONBody

// PostApiV2ApiKeyJSONRequestBody defines body for PostApiV2ApiKey for application/json ContentType.
type PostApiV2ApiKeyJSONRequestBody PostApiV2ApiKeyJSONBody

// PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdJSONRequestBody defines body for PatchApiV2OrganizationsOrganizationIdMembershipsMembershipId for application/json ContentType.
type PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdJSONRequestBody PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdJSONBody

// PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody defines body for PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironment for application/json ContentType.
type PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentJSONBody

// PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody defines body for PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentName for application/json ContentType.
type PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONBody

// DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody defines body for DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentName for application/json ContentType.
type DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONBody

// PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody defines body for PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentName for application/json ContentType.
type PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONBody

// PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody defines body for PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironment for application/json ContentType.
type PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentJSONBody

// DeleteApiV2SecretsJSONRequestBody defines body for DeleteApiV2Secrets for application/json ContentType.
type DeleteApiV2SecretsJSONRequestBody DeleteApiV2SecretsJSONBody

// PatchApiV2SecretsJSONRequestBody defines body for PatchApiV2Secrets for application/json ContentType.
type PatchApiV2SecretsJSONRequestBody PatchApiV2SecretsJSONBody

// PostApiV2SecretsJSONRequestBody defines body for PostApiV2Secrets for application/json ContentType.
type PostApiV2SecretsJSONRequestBody PostApiV2SecretsJSONBody

// PostApiV2ServiceTokenJSONRequestBody defines body for PostApiV2ServiceToken for application/json ContentType.
type PostApiV2ServiceTokenJSONRequestBody PostApiV2ServiceTokenJSONBody

// DeleteApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody defines body for DeleteApiV2WorkspaceWorkspaceIdEnvironments for application/json ContentType.
type DeleteApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody DeleteApiV2WorkspaceWorkspaceIdEnvironmentsJSONBody

// PostApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody defines body for PostApiV2WorkspaceWorkspaceIdEnvironments for application/json ContentType.
type PostApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody PostApiV2WorkspaceWorkspaceIdEnvironmentsJSONBody

// PutApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody defines body for PutApiV2WorkspaceWorkspaceIdEnvironments for application/json ContentType.
type PutApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody PutApiV2WorkspaceWorkspaceIdEnvironmentsJSONBody

// PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdJSONRequestBody defines body for PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipId for application/json ContentType.
type PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdJSONRequestBody PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdJSONBody

// PostApiV2WorkspaceWorkspaceIdSecretsJSONRequestBody defines body for PostApiV2WorkspaceWorkspaceIdSecrets for application/json ContentType.
type PostApiV2WorkspaceWorkspaceIdSecretsJSONRequestBody PostApiV2WorkspaceWorkspaceIdSecretsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiStatus request
	GetApiStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ActionActionId request
	GetApiV1ActionActionId(ctx context.Context, actionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AuthCheckAuth request
	PostApiV1AuthCheckAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AuthLogin1 request with any body
	PostApiV1AuthLogin1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AuthLogin1(ctx context.Context, body PostApiV1AuthLogin1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AuthLogin2 request with any body
	PostApiV1AuthLogin2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AuthLogin2(ctx context.Context, body PostApiV1AuthLogin2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AuthLogout request
	PostApiV1AuthLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AuthToken request
	PostApiV1AuthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV1BotBotIdActive request with any body
	PatchApiV1BotBotIdActiveWithBody(ctx context.Context, botId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV1BotBotIdActive(ctx context.Context, botId string, body PatchApiV1BotBotIdActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1BotWorkspaceId request
	GetApiV1BotWorkspaceId(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1IntegrationAuthIntegrationOptions request
	GetApiV1IntegrationAuthIntegrationOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1IntegrationAuthOauthToken request with any body
	PostApiV1IntegrationAuthOauthTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1IntegrationAuthOauthToken(ctx context.Context, body PostApiV1IntegrationAuthOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1IntegrationAuthIntegrationAuthId request
	DeleteApiV1IntegrationAuthIntegrationAuthId(ctx context.Context, integrationAuthId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1IntegrationAuthIntegrationAuthIdApps request
	GetApiV1IntegrationAuthIntegrationAuthIdApps(ctx context.Context, integrationAuthId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1IntegrationIntegrationId request
	DeleteApiV1IntegrationIntegrationId(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV1IntegrationIntegrationId request with any body
	PatchApiV1IntegrationIntegrationIdWithBody(ctx context.Context, integrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV1IntegrationIntegrationId(ctx context.Context, integrationId string, body PatchApiV1IntegrationIntegrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1InviteOrgSignup request with any body
	PostApiV1InviteOrgSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1InviteOrgSignup(ctx context.Context, body PostApiV1InviteOrgSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1InviteOrgVerify request with any body
	PostApiV1InviteOrgVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1InviteOrgVerify(ctx context.Context, body PostApiV1InviteOrgVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1KeyWorkspaceId request with any body
	PostApiV1KeyWorkspaceIdWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1KeyWorkspaceId(ctx context.Context, workspaceId string, body PostApiV1KeyWorkspaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1KeyWorkspaceIdLatest request
	GetApiV1KeyWorkspaceIdLatest(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRole request
	PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRole(ctx context.Context, membershipOrgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1MembershipOrgMembershipOrgId request
	DeleteApiV1MembershipOrgMembershipOrgId(ctx context.Context, membershipOrgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1MembershipMembershipId request
	DeleteApiV1MembershipMembershipId(ctx context.Context, membershipId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1MembershipMembershipIdChangeRole request with any body
	PostApiV1MembershipMembershipIdChangeRoleWithBody(ctx context.Context, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1MembershipMembershipIdChangeRole(ctx context.Context, membershipId string, body PostApiV1MembershipMembershipIdChangeRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1MembershipWorkspaceIdConnect request
	GetApiV1MembershipWorkspaceIdConnect(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Organization request
	GetApiV1Organization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Organization request with any body
	PostApiV1OrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Organization(ctx context.Context, body PostApiV1OrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationOrganizationId request
	GetApiV1OrganizationOrganizationId(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1OrganizationOrganizationIdCustomerPortalSession request
	PostApiV1OrganizationOrganizationIdCustomerPortalSession(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1OrganizationOrganizationIdIncidentContactOrg request with any body
	DeleteApiV1OrganizationOrganizationIdIncidentContactOrgWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV1OrganizationOrganizationIdIncidentContactOrg(ctx context.Context, organizationId string, body DeleteApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationOrganizationIdIncidentContactOrg request
	GetApiV1OrganizationOrganizationIdIncidentContactOrg(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1OrganizationOrganizationIdIncidentContactOrg request with any body
	PostApiV1OrganizationOrganizationIdIncidentContactOrgWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1OrganizationOrganizationIdIncidentContactOrg(ctx context.Context, organizationId string, body PostApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationOrganizationIdMyWorkspaces request
	GetApiV1OrganizationOrganizationIdMyWorkspaces(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV1OrganizationOrganizationIdName request with any body
	PatchApiV1OrganizationOrganizationIdNameWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV1OrganizationOrganizationIdName(ctx context.Context, organizationId string, body PatchApiV1OrganizationOrganizationIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationOrganizationIdSubscriptions request
	GetApiV1OrganizationOrganizationIdSubscriptions(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationOrganizationIdUsers request
	GetApiV1OrganizationOrganizationIdUsers(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PasswordBackupPrivateKey request
	GetApiV1PasswordBackupPrivateKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PasswordBackupPrivateKey request with any body
	PostApiV1PasswordBackupPrivateKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PasswordBackupPrivateKey(ctx context.Context, body PostApiV1PasswordBackupPrivateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PasswordChangePassword request with any body
	PostApiV1PasswordChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PasswordChangePassword(ctx context.Context, body PostApiV1PasswordChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PasswordEmailPasswordReset request with any body
	PostApiV1PasswordEmailPasswordResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PasswordEmailPasswordReset(ctx context.Context, body PostApiV1PasswordEmailPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PasswordEmailPasswordResetVerify request with any body
	PostApiV1PasswordEmailPasswordResetVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PasswordEmailPasswordResetVerify(ctx context.Context, body PostApiV1PasswordEmailPasswordResetVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PasswordPasswordReset request with any body
	PostApiV1PasswordPasswordResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PasswordPasswordReset(ctx context.Context, body PostApiV1PasswordPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PasswordSrp1 request with any body
	PostApiV1PasswordSrp1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PasswordSrp1(ctx context.Context, body PostApiV1PasswordSrp1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SecretSnapshotSecretSnapshotId request
	GetApiV1SecretSnapshotSecretSnapshotId(ctx context.Context, secretSnapshotId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SecretSecretIdSecretVersions request
	GetApiV1SecretSecretIdSecretVersions(ctx context.Context, secretId string, params *GetApiV1SecretSecretIdSecretVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SecretSecretIdSecretVersionsRollback request with any body
	PostApiV1SecretSecretIdSecretVersionsRollbackWithBody(ctx context.Context, secretId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SecretSecretIdSecretVersionsRollback(ctx context.Context, secretId string, body PostApiV1SecretSecretIdSecretVersionsRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SecretWorkspaceId request
	GetApiV1SecretWorkspaceId(ctx context.Context, workspaceId string, params *GetApiV1SecretWorkspaceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SecretWorkspaceId request with any body
	PostApiV1SecretWorkspaceIdWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SecretWorkspaceId(ctx context.Context, workspaceId string, body PostApiV1SecretWorkspaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1SecretWorkspaceIdServiceToken request
	GetApiV1SecretWorkspaceIdServiceToken(ctx context.Context, workspaceId string, params *GetApiV1SecretWorkspaceIdServiceTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ServiceToken request
	GetApiV1ServiceToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ServiceToken request with any body
	PostApiV1ServiceTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ServiceToken(ctx context.Context, body PostApiV1ServiceTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SignupCompleteAccountInvite request with any body
	PostApiV1SignupCompleteAccountInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SignupCompleteAccountInvite(ctx context.Context, body PostApiV1SignupCompleteAccountInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SignupCompleteAccountSignup request with any body
	PostApiV1SignupCompleteAccountSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SignupCompleteAccountSignup(ctx context.Context, body PostApiV1SignupCompleteAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SignupEmailSignup request with any body
	PostApiV1SignupEmailSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SignupEmailSignup(ctx context.Context, body PostApiV1SignupEmailSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1SignupEmailVerify request with any body
	PostApiV1SignupEmailVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1SignupEmailVerify(ctx context.Context, body PostApiV1SignupEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1StripeWebhook request
	PostApiV1StripeWebhook(ctx context.Context, params *PostApiV1StripeWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1UserAction request
	GetApiV1UserAction(ctx context.Context, params *GetApiV1UserActionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1UserAction request with any body
	PostApiV1UserActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1UserAction(ctx context.Context, body PostApiV1UserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1User request
	GetApiV1User(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Workspace request
	GetApiV1Workspace(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Workspace request with any body
	PostApiV1WorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Workspace(ctx context.Context, body PostApiV1WorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1WorkspaceWorkspaceId request
	DeleteApiV1WorkspaceWorkspaceId(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1WorkspaceWorkspaceId request
	GetApiV1WorkspaceWorkspaceId(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1WorkspaceWorkspaceIdAuthorizations request
	GetApiV1WorkspaceWorkspaceIdAuthorizations(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1WorkspaceWorkspaceIdIntegrations request
	GetApiV1WorkspaceWorkspaceIdIntegrations(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1WorkspaceWorkspaceIdInviteSignup request with any body
	PostApiV1WorkspaceWorkspaceIdInviteSignupWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1WorkspaceWorkspaceIdInviteSignup(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdInviteSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1WorkspaceWorkspaceIdKeys request
	GetApiV1WorkspaceWorkspaceIdKeys(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1WorkspaceWorkspaceIdLogs request
	GetApiV1WorkspaceWorkspaceIdLogs(ctx context.Context, workspaceId string, params *GetApiV1WorkspaceWorkspaceIdLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1WorkspaceWorkspaceIdName request with any body
	PostApiV1WorkspaceWorkspaceIdNameWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1WorkspaceWorkspaceIdName(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1WorkspaceWorkspaceIdSecretSnapshots request
	GetApiV1WorkspaceWorkspaceIdSecretSnapshots(ctx context.Context, workspaceId string, params *GetApiV1WorkspaceWorkspaceIdSecretSnapshotsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCount request
	GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCount(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollback request with any body
	PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollback(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1WorkspaceWorkspaceIdServiceTokens request
	GetApiV1WorkspaceWorkspaceIdServiceTokens(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1WorkspaceWorkspaceIdUsers request
	GetApiV1WorkspaceWorkspaceIdUsers(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ApiKey request
	GetApiV2ApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2ApiKey request with any body
	PostApiV2ApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2ApiKey(ctx context.Context, body PostApiV2ApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2ApiKeyApiKeyDataId request
	DeleteApiV2ApiKeyApiKeyDataId(ctx context.Context, apiKeyDataId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdMemberships request
	GetApiV2OrganizationsOrganizationIdMemberships(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipId request
	DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipId(ctx context.Context, organizationId string, membershipId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2OrganizationsOrganizationIdMembershipsMembershipId request with any body
	PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithBody(ctx context.Context, organizationId string, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2OrganizationsOrganizationIdMembershipsMembershipId(ctx context.Context, organizationId string, membershipId string, body PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2OrganizationsOrganizationIdWorkspaces request
	GetApiV2OrganizationsOrganizationIdWorkspaces(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironment request with any body
	PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentWithBody(ctx context.Context, workspaceId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironment(ctx context.Context, workspaceId string, environment string, body PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentName request with any body
	PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBody(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentName(ctx context.Context, workspaceId string, environmentName string, body PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentName request with any body
	DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBody(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentName(ctx context.Context, workspaceId string, environmentName string, body DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2SecretWorkspaceWorkspaceId request
	GetApiV2SecretWorkspaceWorkspaceId(ctx context.Context, workspaceId string, params *GetApiV2SecretWorkspaceWorkspaceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentName request with any body
	PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBody(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentName(ctx context.Context, workspaceId string, environmentName string, body PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironment request with any body
	PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentWithBody(ctx context.Context, workspaceId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironment(ctx context.Context, workspaceId string, environment string, body PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2SecretSecretId request
	DeleteApiV2SecretSecretId(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2SecretSecretId request
	GetApiV2SecretSecretId(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2Secrets request with any body
	DeleteApiV2SecretsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV2Secrets(ctx context.Context, body DeleteApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2Secrets request
	GetApiV2Secrets(ctx context.Context, params *GetApiV2SecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2Secrets request with any body
	PatchApiV2SecretsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2Secrets(ctx context.Context, body PatchApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2Secrets request with any body
	PostApiV2SecretsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2Secrets(ctx context.Context, body PostApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2ServiceToken request
	GetApiV2ServiceToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2ServiceToken request with any body
	PostApiV2ServiceTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2ServiceToken(ctx context.Context, body PostApiV2ServiceTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2ServiceTokenServiceTokenDataId request
	DeleteApiV2ServiceTokenServiceTokenDataId(ctx context.Context, serviceTokenDataId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2UsersMe request
	GetApiV2UsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2UsersMeOrganizations request
	GetApiV2UsersMeOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2WorkspaceWorkspaceIdEncryptedKey request
	GetApiV2WorkspaceWorkspaceIdEncryptedKey(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2WorkspaceWorkspaceIdEnvironments request with any body
	DeleteApiV2WorkspaceWorkspaceIdEnvironmentsWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiV2WorkspaceWorkspaceIdEnvironments(ctx context.Context, workspaceId string, body DeleteApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2WorkspaceWorkspaceIdEnvironments request with any body
	PostApiV2WorkspaceWorkspaceIdEnvironmentsWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2WorkspaceWorkspaceIdEnvironments(ctx context.Context, workspaceId string, body PostApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV2WorkspaceWorkspaceIdEnvironments request with any body
	PutApiV2WorkspaceWorkspaceIdEnvironmentsWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV2WorkspaceWorkspaceIdEnvironments(ctx context.Context, workspaceId string, body PutApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2WorkspaceWorkspaceIdMemberships request
	GetApiV2WorkspaceWorkspaceIdMemberships(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipId request
	DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipId(ctx context.Context, workspaceId string, membershipId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipId request with any body
	PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithBody(ctx context.Context, workspaceId string, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipId(ctx context.Context, workspaceId string, membershipId string, body PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2WorkspaceWorkspaceIdSecrets request
	GetApiV2WorkspaceWorkspaceIdSecrets(ctx context.Context, workspaceId string, params *GetApiV2WorkspaceWorkspaceIdSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV2WorkspaceWorkspaceIdSecrets request with any body
	PostApiV2WorkspaceWorkspaceIdSecretsWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV2WorkspaceWorkspaceIdSecrets(ctx context.Context, workspaceId string, body PostApiV2WorkspaceWorkspaceIdSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV2WorkspaceWorkspaceIdServiceTokenData request
	GetApiV2WorkspaceWorkspaceIdServiceTokenData(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ActionActionId(ctx context.Context, actionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ActionActionIdRequest(c.Server, actionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthCheckAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthCheckAuthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthLogin1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthLogin1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthLogin1(ctx context.Context, body PostApiV1AuthLogin1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthLogin1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthLogin2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthLogin2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthLogin2(ctx context.Context, body PostApiV1AuthLogin2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthLogin2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1BotBotIdActiveWithBody(ctx context.Context, botId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1BotBotIdActiveRequestWithBody(c.Server, botId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1BotBotIdActive(ctx context.Context, botId string, body PatchApiV1BotBotIdActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1BotBotIdActiveRequest(c.Server, botId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1BotWorkspaceId(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1BotWorkspaceIdRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1IntegrationAuthIntegrationOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IntegrationAuthIntegrationOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IntegrationAuthOauthTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IntegrationAuthOauthTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1IntegrationAuthOauthToken(ctx context.Context, body PostApiV1IntegrationAuthOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1IntegrationAuthOauthTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1IntegrationAuthIntegrationAuthId(ctx context.Context, integrationAuthId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1IntegrationAuthIntegrationAuthIdRequest(c.Server, integrationAuthId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1IntegrationAuthIntegrationAuthIdApps(ctx context.Context, integrationAuthId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1IntegrationAuthIntegrationAuthIdAppsRequest(c.Server, integrationAuthId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1IntegrationIntegrationId(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1IntegrationIntegrationIdRequest(c.Server, integrationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1IntegrationIntegrationIdWithBody(ctx context.Context, integrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1IntegrationIntegrationIdRequestWithBody(c.Server, integrationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1IntegrationIntegrationId(ctx context.Context, integrationId string, body PatchApiV1IntegrationIntegrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1IntegrationIntegrationIdRequest(c.Server, integrationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1InviteOrgSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1InviteOrgSignupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1InviteOrgSignup(ctx context.Context, body PostApiV1InviteOrgSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1InviteOrgSignupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1InviteOrgVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1InviteOrgVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1InviteOrgVerify(ctx context.Context, body PostApiV1InviteOrgVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1InviteOrgVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1KeyWorkspaceIdWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1KeyWorkspaceIdRequestWithBody(c.Server, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1KeyWorkspaceId(ctx context.Context, workspaceId string, body PostApiV1KeyWorkspaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1KeyWorkspaceIdRequest(c.Server, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1KeyWorkspaceIdLatest(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1KeyWorkspaceIdLatestRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRole(ctx context.Context, membershipOrgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleRequest(c.Server, membershipOrgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1MembershipOrgMembershipOrgId(ctx context.Context, membershipOrgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1MembershipOrgMembershipOrgIdRequest(c.Server, membershipOrgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1MembershipMembershipId(ctx context.Context, membershipId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1MembershipMembershipIdRequest(c.Server, membershipId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1MembershipMembershipIdChangeRoleWithBody(ctx context.Context, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1MembershipMembershipIdChangeRoleRequestWithBody(c.Server, membershipId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1MembershipMembershipIdChangeRole(ctx context.Context, membershipId string, body PostApiV1MembershipMembershipIdChangeRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1MembershipMembershipIdChangeRoleRequest(c.Server, membershipId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1MembershipWorkspaceIdConnect(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1MembershipWorkspaceIdConnectRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Organization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Organization(ctx context.Context, body PostApiV1OrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationOrganizationId(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationOrganizationIdRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationOrganizationIdCustomerPortalSession(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationOrganizationIdCustomerPortalSessionRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1OrganizationOrganizationIdIncidentContactOrgWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1OrganizationOrganizationIdIncidentContactOrgRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1OrganizationOrganizationIdIncidentContactOrg(ctx context.Context, organizationId string, body DeleteApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1OrganizationOrganizationIdIncidentContactOrgRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationOrganizationIdIncidentContactOrg(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationOrganizationIdIncidentContactOrgRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationOrganizationIdIncidentContactOrgWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationOrganizationIdIncidentContactOrgRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationOrganizationIdIncidentContactOrg(ctx context.Context, organizationId string, body PostApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationOrganizationIdIncidentContactOrgRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationOrganizationIdMyWorkspaces(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationOrganizationIdMyWorkspacesRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1OrganizationOrganizationIdNameWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1OrganizationOrganizationIdNameRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1OrganizationOrganizationIdName(ctx context.Context, organizationId string, body PatchApiV1OrganizationOrganizationIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1OrganizationOrganizationIdNameRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationOrganizationIdSubscriptions(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationOrganizationIdSubscriptionsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationOrganizationIdUsers(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationOrganizationIdUsersRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PasswordBackupPrivateKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PasswordBackupPrivateKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordBackupPrivateKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordBackupPrivateKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordBackupPrivateKey(ctx context.Context, body PostApiV1PasswordBackupPrivateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordBackupPrivateKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordChangePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordChangePassword(ctx context.Context, body PostApiV1PasswordChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordChangePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordEmailPasswordResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordEmailPasswordResetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordEmailPasswordReset(ctx context.Context, body PostApiV1PasswordEmailPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordEmailPasswordResetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordEmailPasswordResetVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordEmailPasswordResetVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordEmailPasswordResetVerify(ctx context.Context, body PostApiV1PasswordEmailPasswordResetVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordEmailPasswordResetVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordPasswordResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordPasswordResetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordPasswordReset(ctx context.Context, body PostApiV1PasswordPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordPasswordResetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordSrp1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordSrp1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PasswordSrp1(ctx context.Context, body PostApiV1PasswordSrp1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PasswordSrp1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SecretSnapshotSecretSnapshotId(ctx context.Context, secretSnapshotId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SecretSnapshotSecretSnapshotIdRequest(c.Server, secretSnapshotId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SecretSecretIdSecretVersions(ctx context.Context, secretId string, params *GetApiV1SecretSecretIdSecretVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SecretSecretIdSecretVersionsRequest(c.Server, secretId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SecretSecretIdSecretVersionsRollbackWithBody(ctx context.Context, secretId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SecretSecretIdSecretVersionsRollbackRequestWithBody(c.Server, secretId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SecretSecretIdSecretVersionsRollback(ctx context.Context, secretId string, body PostApiV1SecretSecretIdSecretVersionsRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SecretSecretIdSecretVersionsRollbackRequest(c.Server, secretId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SecretWorkspaceId(ctx context.Context, workspaceId string, params *GetApiV1SecretWorkspaceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SecretWorkspaceIdRequest(c.Server, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SecretWorkspaceIdWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SecretWorkspaceIdRequestWithBody(c.Server, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SecretWorkspaceId(ctx context.Context, workspaceId string, body PostApiV1SecretWorkspaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SecretWorkspaceIdRequest(c.Server, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1SecretWorkspaceIdServiceToken(ctx context.Context, workspaceId string, params *GetApiV1SecretWorkspaceIdServiceTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SecretWorkspaceIdServiceTokenRequest(c.Server, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ServiceToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ServiceTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ServiceTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ServiceTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ServiceToken(ctx context.Context, body PostApiV1ServiceTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ServiceTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SignupCompleteAccountInviteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SignupCompleteAccountInviteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SignupCompleteAccountInvite(ctx context.Context, body PostApiV1SignupCompleteAccountInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SignupCompleteAccountInviteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SignupCompleteAccountSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SignupCompleteAccountSignupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SignupCompleteAccountSignup(ctx context.Context, body PostApiV1SignupCompleteAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SignupCompleteAccountSignupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SignupEmailSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SignupEmailSignupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SignupEmailSignup(ctx context.Context, body PostApiV1SignupEmailSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SignupEmailSignupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SignupEmailVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SignupEmailVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1SignupEmailVerify(ctx context.Context, body PostApiV1SignupEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1SignupEmailVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1StripeWebhook(ctx context.Context, params *PostApiV1StripeWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1StripeWebhookRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1UserAction(ctx context.Context, params *GetApiV1UserActionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1UserActionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1UserActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1UserActionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1UserAction(ctx context.Context, body PostApiV1UserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1UserActionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1User(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1UserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Workspace(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WorkspaceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1WorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1WorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Workspace(ctx context.Context, body PostApiV1WorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1WorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1WorkspaceWorkspaceId(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1WorkspaceWorkspaceIdRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1WorkspaceWorkspaceId(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WorkspaceWorkspaceIdRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1WorkspaceWorkspaceIdAuthorizations(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WorkspaceWorkspaceIdAuthorizationsRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1WorkspaceWorkspaceIdIntegrations(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WorkspaceWorkspaceIdIntegrationsRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1WorkspaceWorkspaceIdInviteSignupWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1WorkspaceWorkspaceIdInviteSignupRequestWithBody(c.Server, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1WorkspaceWorkspaceIdInviteSignup(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdInviteSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1WorkspaceWorkspaceIdInviteSignupRequest(c.Server, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1WorkspaceWorkspaceIdKeys(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WorkspaceWorkspaceIdKeysRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1WorkspaceWorkspaceIdLogs(ctx context.Context, workspaceId string, params *GetApiV1WorkspaceWorkspaceIdLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WorkspaceWorkspaceIdLogsRequest(c.Server, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1WorkspaceWorkspaceIdNameWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1WorkspaceWorkspaceIdNameRequestWithBody(c.Server, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1WorkspaceWorkspaceIdName(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1WorkspaceWorkspaceIdNameRequest(c.Server, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1WorkspaceWorkspaceIdSecretSnapshots(ctx context.Context, workspaceId string, params *GetApiV1WorkspaceWorkspaceIdSecretSnapshotsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WorkspaceWorkspaceIdSecretSnapshotsRequest(c.Server, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCount(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackRequestWithBody(c.Server, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollback(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackRequest(c.Server, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1WorkspaceWorkspaceIdServiceTokens(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WorkspaceWorkspaceIdServiceTokensRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1WorkspaceWorkspaceIdUsers(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WorkspaceWorkspaceIdUsersRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ApiKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ApiKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ApiKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ApiKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ApiKey(ctx context.Context, body PostApiV2ApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ApiKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2ApiKeyApiKeyDataId(ctx context.Context, apiKeyDataId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2ApiKeyApiKeyDataIdRequest(c.Server, apiKeyDataId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdMemberships(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdMembershipsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipId(ctx context.Context, organizationId string, membershipId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdRequest(c.Server, organizationId, membershipId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithBody(ctx context.Context, organizationId string, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdRequestWithBody(c.Server, organizationId, membershipId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2OrganizationsOrganizationIdMembershipsMembershipId(ctx context.Context, organizationId string, membershipId string, body PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdRequest(c.Server, organizationId, membershipId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2OrganizationsOrganizationIdWorkspaces(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2OrganizationsOrganizationIdWorkspacesRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentWithBody(ctx context.Context, workspaceId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentRequestWithBody(c.Server, workspaceId, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironment(ctx context.Context, workspaceId string, environment string, body PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentRequest(c.Server, workspaceId, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBody(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody(c.Server, workspaceId, environmentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentName(ctx context.Context, workspaceId string, environmentName string, body PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequest(c.Server, workspaceId, environmentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBody(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody(c.Server, workspaceId, environmentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentName(ctx context.Context, workspaceId string, environmentName string, body DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequest(c.Server, workspaceId, environmentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2SecretWorkspaceWorkspaceId(ctx context.Context, workspaceId string, params *GetApiV2SecretWorkspaceWorkspaceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2SecretWorkspaceWorkspaceIdRequest(c.Server, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBody(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody(c.Server, workspaceId, environmentName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentName(ctx context.Context, workspaceId string, environmentName string, body PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequest(c.Server, workspaceId, environmentName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentWithBody(ctx context.Context, workspaceId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentRequestWithBody(c.Server, workspaceId, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironment(ctx context.Context, workspaceId string, environment string, body PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentRequest(c.Server, workspaceId, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2SecretSecretId(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2SecretSecretIdRequest(c.Server, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2SecretSecretId(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2SecretSecretIdRequest(c.Server, secretId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2SecretsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2SecretsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2Secrets(ctx context.Context, body DeleteApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2SecretsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2Secrets(ctx context.Context, params *GetApiV2SecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2SecretsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2SecretsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2SecretsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2Secrets(ctx context.Context, body PatchApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2SecretsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2SecretsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2SecretsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2Secrets(ctx context.Context, body PostApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2SecretsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2ServiceToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2ServiceTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ServiceTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ServiceTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2ServiceToken(ctx context.Context, body PostApiV2ServiceTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2ServiceTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2ServiceTokenServiceTokenDataId(ctx context.Context, serviceTokenDataId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2ServiceTokenServiceTokenDataIdRequest(c.Server, serviceTokenDataId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2UsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2UsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2UsersMeOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2UsersMeOrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2WorkspaceWorkspaceIdEncryptedKey(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2WorkspaceWorkspaceIdEncryptedKeyRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2WorkspaceWorkspaceIdEnvironmentsWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody(c.Server, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2WorkspaceWorkspaceIdEnvironments(ctx context.Context, workspaceId string, body DeleteApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2WorkspaceWorkspaceIdEnvironmentsRequest(c.Server, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2WorkspaceWorkspaceIdEnvironmentsWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody(c.Server, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2WorkspaceWorkspaceIdEnvironments(ctx context.Context, workspaceId string, body PostApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2WorkspaceWorkspaceIdEnvironmentsRequest(c.Server, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2WorkspaceWorkspaceIdEnvironmentsWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody(c.Server, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV2WorkspaceWorkspaceIdEnvironments(ctx context.Context, workspaceId string, body PutApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV2WorkspaceWorkspaceIdEnvironmentsRequest(c.Server, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2WorkspaceWorkspaceIdMemberships(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2WorkspaceWorkspaceIdMembershipsRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipId(ctx context.Context, workspaceId string, membershipId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdRequest(c.Server, workspaceId, membershipId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithBody(ctx context.Context, workspaceId string, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdRequestWithBody(c.Server, workspaceId, membershipId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipId(ctx context.Context, workspaceId string, membershipId string, body PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdRequest(c.Server, workspaceId, membershipId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2WorkspaceWorkspaceIdSecrets(ctx context.Context, workspaceId string, params *GetApiV2WorkspaceWorkspaceIdSecretsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2WorkspaceWorkspaceIdSecretsRequest(c.Server, workspaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2WorkspaceWorkspaceIdSecretsWithBody(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2WorkspaceWorkspaceIdSecretsRequestWithBody(c.Server, workspaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV2WorkspaceWorkspaceIdSecrets(ctx context.Context, workspaceId string, body PostApiV2WorkspaceWorkspaceIdSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV2WorkspaceWorkspaceIdSecretsRequest(c.Server, workspaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV2WorkspaceWorkspaceIdServiceTokenData(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV2WorkspaceWorkspaceIdServiceTokenDataRequest(c.Server, workspaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiStatusRequest generates requests for GetApiStatus
func NewGetApiStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ActionActionIdRequest generates requests for GetApiV1ActionActionId
func NewGetApiV1ActionActionIdRequest(server string, actionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/action/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AuthCheckAuthRequest generates requests for PostApiV1AuthCheckAuth
func NewPostApiV1AuthCheckAuthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/checkAuth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AuthLogin1Request calls the generic PostApiV1AuthLogin1 builder with application/json body
func NewPostApiV1AuthLogin1Request(server string, body PostApiV1AuthLogin1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AuthLogin1RequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1AuthLogin1RequestWithBody generates requests for PostApiV1AuthLogin1 with any type of body
func NewPostApiV1AuthLogin1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/login1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1AuthLogin2Request calls the generic PostApiV1AuthLogin2 builder with application/json body
func NewPostApiV1AuthLogin2Request(server string, body PostApiV1AuthLogin2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AuthLogin2RequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1AuthLogin2RequestWithBody generates requests for PostApiV1AuthLogin2 with any type of body
func NewPostApiV1AuthLogin2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/login2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1AuthLogoutRequest generates requests for PostApiV1AuthLogout
func NewPostApiV1AuthLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AuthTokenRequest generates requests for PostApiV1AuthToken
func NewPostApiV1AuthTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV1BotBotIdActiveRequest calls the generic PatchApiV1BotBotIdActive builder with application/json body
func NewPatchApiV1BotBotIdActiveRequest(server string, botId string, body PatchApiV1BotBotIdActiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV1BotBotIdActiveRequestWithBody(server, botId, "application/json", bodyReader)
}

// NewPatchApiV1BotBotIdActiveRequestWithBody generates requests for PatchApiV1BotBotIdActive with any type of body
func NewPatchApiV1BotBotIdActiveRequestWithBody(server string, botId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "botId", runtime.ParamLocationPath, botId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/bot/%s/active", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1BotWorkspaceIdRequest generates requests for GetApiV1BotWorkspaceId
func NewGetApiV1BotWorkspaceIdRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/bot/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1IntegrationAuthIntegrationOptionsRequest generates requests for GetApiV1IntegrationAuthIntegrationOptions
func NewGetApiV1IntegrationAuthIntegrationOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integration-auth/integration-options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1IntegrationAuthOauthTokenRequest calls the generic PostApiV1IntegrationAuthOauthToken builder with application/json body
func NewPostApiV1IntegrationAuthOauthTokenRequest(server string, body PostApiV1IntegrationAuthOauthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1IntegrationAuthOauthTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1IntegrationAuthOauthTokenRequestWithBody generates requests for PostApiV1IntegrationAuthOauthToken with any type of body
func NewPostApiV1IntegrationAuthOauthTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integration-auth/oauth-token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1IntegrationAuthIntegrationAuthIdRequest generates requests for DeleteApiV1IntegrationAuthIntegrationAuthId
func NewDeleteApiV1IntegrationAuthIntegrationAuthIdRequest(server string, integrationAuthId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integrationAuthId", runtime.ParamLocationPath, integrationAuthId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integration-auth/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1IntegrationAuthIntegrationAuthIdAppsRequest generates requests for GetApiV1IntegrationAuthIntegrationAuthIdApps
func NewGetApiV1IntegrationAuthIntegrationAuthIdAppsRequest(server string, integrationAuthId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integrationAuthId", runtime.ParamLocationPath, integrationAuthId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integration-auth/%s/apps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1IntegrationIntegrationIdRequest generates requests for DeleteApiV1IntegrationIntegrationId
func NewDeleteApiV1IntegrationIntegrationIdRequest(server string, integrationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integrationId", runtime.ParamLocationPath, integrationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integration/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV1IntegrationIntegrationIdRequest calls the generic PatchApiV1IntegrationIntegrationId builder with application/json body
func NewPatchApiV1IntegrationIntegrationIdRequest(server string, integrationId string, body PatchApiV1IntegrationIntegrationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV1IntegrationIntegrationIdRequestWithBody(server, integrationId, "application/json", bodyReader)
}

// NewPatchApiV1IntegrationIntegrationIdRequestWithBody generates requests for PatchApiV1IntegrationIntegrationId with any type of body
func NewPatchApiV1IntegrationIntegrationIdRequestWithBody(server string, integrationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "integrationId", runtime.ParamLocationPath, integrationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integration/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1InviteOrgSignupRequest calls the generic PostApiV1InviteOrgSignup builder with application/json body
func NewPostApiV1InviteOrgSignupRequest(server string, body PostApiV1InviteOrgSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1InviteOrgSignupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1InviteOrgSignupRequestWithBody generates requests for PostApiV1InviteOrgSignup with any type of body
func NewPostApiV1InviteOrgSignupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/invite-org/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1InviteOrgVerifyRequest calls the generic PostApiV1InviteOrgVerify builder with application/json body
func NewPostApiV1InviteOrgVerifyRequest(server string, body PostApiV1InviteOrgVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1InviteOrgVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1InviteOrgVerifyRequestWithBody generates requests for PostApiV1InviteOrgVerify with any type of body
func NewPostApiV1InviteOrgVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/invite-org/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1KeyWorkspaceIdRequest calls the generic PostApiV1KeyWorkspaceId builder with application/json body
func NewPostApiV1KeyWorkspaceIdRequest(server string, workspaceId string, body PostApiV1KeyWorkspaceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1KeyWorkspaceIdRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewPostApiV1KeyWorkspaceIdRequestWithBody generates requests for PostApiV1KeyWorkspaceId with any type of body
func NewPostApiV1KeyWorkspaceIdRequestWithBody(server string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1KeyWorkspaceIdLatestRequest generates requests for GetApiV1KeyWorkspaceIdLatest
func NewGetApiV1KeyWorkspaceIdLatestRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/key/%s/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleRequest generates requests for PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRole
func NewPostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleRequest(server string, membershipOrgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "membershipOrgId", runtime.ParamLocationPath, membershipOrgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/membership-org/membershipOrg/%s/change-role", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1MembershipOrgMembershipOrgIdRequest generates requests for DeleteApiV1MembershipOrgMembershipOrgId
func NewDeleteApiV1MembershipOrgMembershipOrgIdRequest(server string, membershipOrgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "membershipOrgId", runtime.ParamLocationPath, membershipOrgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/membership-org/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1MembershipMembershipIdRequest generates requests for DeleteApiV1MembershipMembershipId
func NewDeleteApiV1MembershipMembershipIdRequest(server string, membershipId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "membershipId", runtime.ParamLocationPath, membershipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/membership/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1MembershipMembershipIdChangeRoleRequest calls the generic PostApiV1MembershipMembershipIdChangeRole builder with application/json body
func NewPostApiV1MembershipMembershipIdChangeRoleRequest(server string, membershipId string, body PostApiV1MembershipMembershipIdChangeRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1MembershipMembershipIdChangeRoleRequestWithBody(server, membershipId, "application/json", bodyReader)
}

// NewPostApiV1MembershipMembershipIdChangeRoleRequestWithBody generates requests for PostApiV1MembershipMembershipIdChangeRole with any type of body
func NewPostApiV1MembershipMembershipIdChangeRoleRequestWithBody(server string, membershipId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "membershipId", runtime.ParamLocationPath, membershipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/membership/%s/change-role", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1MembershipWorkspaceIdConnectRequest generates requests for GetApiV1MembershipWorkspaceIdConnect
func NewGetApiV1MembershipWorkspaceIdConnectRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/membership/%s/connect", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1OrganizationRequest generates requests for GetApiV1Organization
func NewGetApiV1OrganizationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1OrganizationRequest calls the generic PostApiV1Organization builder with application/json body
func NewPostApiV1OrganizationRequest(server string, body PostApiV1OrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1OrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1OrganizationRequestWithBody generates requests for PostApiV1Organization with any type of body
func NewPostApiV1OrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1OrganizationOrganizationIdRequest generates requests for GetApiV1OrganizationOrganizationId
func NewGetApiV1OrganizationOrganizationIdRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1OrganizationOrganizationIdCustomerPortalSessionRequest generates requests for PostApiV1OrganizationOrganizationIdCustomerPortalSession
func NewPostApiV1OrganizationOrganizationIdCustomerPortalSessionRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization/%s/customer-portal-session", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1OrganizationOrganizationIdIncidentContactOrgRequest calls the generic DeleteApiV1OrganizationOrganizationIdIncidentContactOrg builder with application/json body
func NewDeleteApiV1OrganizationOrganizationIdIncidentContactOrgRequest(server string, organizationId string, body DeleteApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV1OrganizationOrganizationIdIncidentContactOrgRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewDeleteApiV1OrganizationOrganizationIdIncidentContactOrgRequestWithBody generates requests for DeleteApiV1OrganizationOrganizationIdIncidentContactOrg with any type of body
func NewDeleteApiV1OrganizationOrganizationIdIncidentContactOrgRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization/%s/incidentContactOrg", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1OrganizationOrganizationIdIncidentContactOrgRequest generates requests for GetApiV1OrganizationOrganizationIdIncidentContactOrg
func NewGetApiV1OrganizationOrganizationIdIncidentContactOrgRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization/%s/incidentContactOrg", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1OrganizationOrganizationIdIncidentContactOrgRequest calls the generic PostApiV1OrganizationOrganizationIdIncidentContactOrg builder with application/json body
func NewPostApiV1OrganizationOrganizationIdIncidentContactOrgRequest(server string, organizationId string, body PostApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1OrganizationOrganizationIdIncidentContactOrgRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewPostApiV1OrganizationOrganizationIdIncidentContactOrgRequestWithBody generates requests for PostApiV1OrganizationOrganizationIdIncidentContactOrg with any type of body
func NewPostApiV1OrganizationOrganizationIdIncidentContactOrgRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization/%s/incidentContactOrg", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1OrganizationOrganizationIdMyWorkspacesRequest generates requests for GetApiV1OrganizationOrganizationIdMyWorkspaces
func NewGetApiV1OrganizationOrganizationIdMyWorkspacesRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization/%s/my-workspaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV1OrganizationOrganizationIdNameRequest calls the generic PatchApiV1OrganizationOrganizationIdName builder with application/json body
func NewPatchApiV1OrganizationOrganizationIdNameRequest(server string, organizationId string, body PatchApiV1OrganizationOrganizationIdNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV1OrganizationOrganizationIdNameRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewPatchApiV1OrganizationOrganizationIdNameRequestWithBody generates requests for PatchApiV1OrganizationOrganizationIdName with any type of body
func NewPatchApiV1OrganizationOrganizationIdNameRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1OrganizationOrganizationIdSubscriptionsRequest generates requests for GetApiV1OrganizationOrganizationIdSubscriptions
func NewGetApiV1OrganizationOrganizationIdSubscriptionsRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization/%s/subscriptions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1OrganizationOrganizationIdUsersRequest generates requests for GetApiV1OrganizationOrganizationIdUsers
func NewGetApiV1OrganizationOrganizationIdUsersRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PasswordBackupPrivateKeyRequest generates requests for GetApiV1PasswordBackupPrivateKey
func NewGetApiV1PasswordBackupPrivateKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/password/backup-private-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PasswordBackupPrivateKeyRequest calls the generic PostApiV1PasswordBackupPrivateKey builder with application/json body
func NewPostApiV1PasswordBackupPrivateKeyRequest(server string, body PostApiV1PasswordBackupPrivateKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PasswordBackupPrivateKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PasswordBackupPrivateKeyRequestWithBody generates requests for PostApiV1PasswordBackupPrivateKey with any type of body
func NewPostApiV1PasswordBackupPrivateKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/password/backup-private-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PasswordChangePasswordRequest calls the generic PostApiV1PasswordChangePassword builder with application/json body
func NewPostApiV1PasswordChangePasswordRequest(server string, body PostApiV1PasswordChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PasswordChangePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PasswordChangePasswordRequestWithBody generates requests for PostApiV1PasswordChangePassword with any type of body
func NewPostApiV1PasswordChangePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/password/change-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PasswordEmailPasswordResetRequest calls the generic PostApiV1PasswordEmailPasswordReset builder with application/json body
func NewPostApiV1PasswordEmailPasswordResetRequest(server string, body PostApiV1PasswordEmailPasswordResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PasswordEmailPasswordResetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PasswordEmailPasswordResetRequestWithBody generates requests for PostApiV1PasswordEmailPasswordReset with any type of body
func NewPostApiV1PasswordEmailPasswordResetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/password/email/password-reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PasswordEmailPasswordResetVerifyRequest calls the generic PostApiV1PasswordEmailPasswordResetVerify builder with application/json body
func NewPostApiV1PasswordEmailPasswordResetVerifyRequest(server string, body PostApiV1PasswordEmailPasswordResetVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PasswordEmailPasswordResetVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PasswordEmailPasswordResetVerifyRequestWithBody generates requests for PostApiV1PasswordEmailPasswordResetVerify with any type of body
func NewPostApiV1PasswordEmailPasswordResetVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/password/email/password-reset-verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PasswordPasswordResetRequest calls the generic PostApiV1PasswordPasswordReset builder with application/json body
func NewPostApiV1PasswordPasswordResetRequest(server string, body PostApiV1PasswordPasswordResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PasswordPasswordResetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PasswordPasswordResetRequestWithBody generates requests for PostApiV1PasswordPasswordReset with any type of body
func NewPostApiV1PasswordPasswordResetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/password/password-reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PasswordSrp1Request calls the generic PostApiV1PasswordSrp1 builder with application/json body
func NewPostApiV1PasswordSrp1Request(server string, body PostApiV1PasswordSrp1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PasswordSrp1RequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PasswordSrp1RequestWithBody generates requests for PostApiV1PasswordSrp1 with any type of body
func NewPostApiV1PasswordSrp1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/password/srp1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SecretSnapshotSecretSnapshotIdRequest generates requests for GetApiV1SecretSnapshotSecretSnapshotId
func NewGetApiV1SecretSnapshotSecretSnapshotIdRequest(server string, secretSnapshotId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secretSnapshotId", runtime.ParamLocationPath, secretSnapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/secret-snapshot/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SecretSecretIdSecretVersionsRequest generates requests for GetApiV1SecretSecretIdSecretVersions
func NewGetApiV1SecretSecretIdSecretVersionsRequest(server string, secretId string, params *GetApiV1SecretSecretIdSecretVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secretId", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/secret/%s/secret-versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1SecretSecretIdSecretVersionsRollbackRequest calls the generic PostApiV1SecretSecretIdSecretVersionsRollback builder with application/json body
func NewPostApiV1SecretSecretIdSecretVersionsRollbackRequest(server string, secretId string, body PostApiV1SecretSecretIdSecretVersionsRollbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SecretSecretIdSecretVersionsRollbackRequestWithBody(server, secretId, "application/json", bodyReader)
}

// NewPostApiV1SecretSecretIdSecretVersionsRollbackRequestWithBody generates requests for PostApiV1SecretSecretIdSecretVersionsRollback with any type of body
func NewPostApiV1SecretSecretIdSecretVersionsRollbackRequestWithBody(server string, secretId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secretId", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/secret/%s/secret-versions/rollback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SecretWorkspaceIdRequest generates requests for GetApiV1SecretWorkspaceId
func NewGetApiV1SecretWorkspaceIdRequest(server string, workspaceId string, params *GetApiV1SecretWorkspaceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/secret/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Environment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Channel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1SecretWorkspaceIdRequest calls the generic PostApiV1SecretWorkspaceId builder with application/json body
func NewPostApiV1SecretWorkspaceIdRequest(server string, workspaceId string, body PostApiV1SecretWorkspaceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SecretWorkspaceIdRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewPostApiV1SecretWorkspaceIdRequestWithBody generates requests for PostApiV1SecretWorkspaceId with any type of body
func NewPostApiV1SecretWorkspaceIdRequestWithBody(server string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/secret/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SecretWorkspaceIdServiceTokenRequest generates requests for GetApiV1SecretWorkspaceIdServiceToken
func NewGetApiV1SecretWorkspaceIdServiceTokenRequest(server string, workspaceId string, params *GetApiV1SecretWorkspaceIdServiceTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/secret/%s/service-token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Environment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Channel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ServiceTokenRequest generates requests for GetApiV1ServiceToken
func NewGetApiV1ServiceTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/service-token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ServiceTokenRequest calls the generic PostApiV1ServiceToken builder with application/json body
func NewPostApiV1ServiceTokenRequest(server string, body PostApiV1ServiceTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ServiceTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1ServiceTokenRequestWithBody generates requests for PostApiV1ServiceToken with any type of body
func NewPostApiV1ServiceTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/service-token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1SignupCompleteAccountInviteRequest calls the generic PostApiV1SignupCompleteAccountInvite builder with application/json body
func NewPostApiV1SignupCompleteAccountInviteRequest(server string, body PostApiV1SignupCompleteAccountInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SignupCompleteAccountInviteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SignupCompleteAccountInviteRequestWithBody generates requests for PostApiV1SignupCompleteAccountInvite with any type of body
func NewPostApiV1SignupCompleteAccountInviteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/signup/complete-account/invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1SignupCompleteAccountSignupRequest calls the generic PostApiV1SignupCompleteAccountSignup builder with application/json body
func NewPostApiV1SignupCompleteAccountSignupRequest(server string, body PostApiV1SignupCompleteAccountSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SignupCompleteAccountSignupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SignupCompleteAccountSignupRequestWithBody generates requests for PostApiV1SignupCompleteAccountSignup with any type of body
func NewPostApiV1SignupCompleteAccountSignupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/signup/complete-account/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1SignupEmailSignupRequest calls the generic PostApiV1SignupEmailSignup builder with application/json body
func NewPostApiV1SignupEmailSignupRequest(server string, body PostApiV1SignupEmailSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SignupEmailSignupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SignupEmailSignupRequestWithBody generates requests for PostApiV1SignupEmailSignup with any type of body
func NewPostApiV1SignupEmailSignupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/signup/email/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1SignupEmailVerifyRequest calls the generic PostApiV1SignupEmailVerify builder with application/json body
func NewPostApiV1SignupEmailVerifyRequest(server string, body PostApiV1SignupEmailVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1SignupEmailVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1SignupEmailVerifyRequestWithBody generates requests for PostApiV1SignupEmailVerify with any type of body
func NewPostApiV1SignupEmailVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/signup/email/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1StripeWebhookRequest generates requests for PostApiV1StripeWebhook
func NewPostApiV1StripeWebhookRequest(server string, params *PostApiV1StripeWebhookParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/stripe/webhook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.StripeSignature != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "stripe-signature", runtime.ParamLocationHeader, *params.StripeSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Set("stripe-signature", headerParam0)
	}

	return req, nil
}

// NewGetApiV1UserActionRequest generates requests for GetApiV1UserAction
func NewGetApiV1UserActionRequest(server string, params *GetApiV1UserActionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user-action/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Action != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1UserActionRequest calls the generic PostApiV1UserAction builder with application/json body
func NewPostApiV1UserActionRequest(server string, body PostApiV1UserActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1UserActionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1UserActionRequestWithBody generates requests for PostApiV1UserAction with any type of body
func NewPostApiV1UserActionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user-action/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1UserRequest generates requests for GetApiV1User
func NewGetApiV1UserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1WorkspaceRequest generates requests for GetApiV1Workspace
func NewGetApiV1WorkspaceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1WorkspaceRequest calls the generic PostApiV1Workspace builder with application/json body
func NewPostApiV1WorkspaceRequest(server string, body PostApiV1WorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1WorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1WorkspaceRequestWithBody generates requests for PostApiV1Workspace with any type of body
func NewPostApiV1WorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1WorkspaceWorkspaceIdRequest generates requests for DeleteApiV1WorkspaceWorkspaceId
func NewDeleteApiV1WorkspaceWorkspaceIdRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1WorkspaceWorkspaceIdRequest generates requests for GetApiV1WorkspaceWorkspaceId
func NewGetApiV1WorkspaceWorkspaceIdRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1WorkspaceWorkspaceIdAuthorizationsRequest generates requests for GetApiV1WorkspaceWorkspaceIdAuthorizations
func NewGetApiV1WorkspaceWorkspaceIdAuthorizationsRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s/authorizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1WorkspaceWorkspaceIdIntegrationsRequest generates requests for GetApiV1WorkspaceWorkspaceIdIntegrations
func NewGetApiV1WorkspaceWorkspaceIdIntegrationsRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s/integrations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1WorkspaceWorkspaceIdInviteSignupRequest calls the generic PostApiV1WorkspaceWorkspaceIdInviteSignup builder with application/json body
func NewPostApiV1WorkspaceWorkspaceIdInviteSignupRequest(server string, workspaceId string, body PostApiV1WorkspaceWorkspaceIdInviteSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1WorkspaceWorkspaceIdInviteSignupRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewPostApiV1WorkspaceWorkspaceIdInviteSignupRequestWithBody generates requests for PostApiV1WorkspaceWorkspaceIdInviteSignup with any type of body
func NewPostApiV1WorkspaceWorkspaceIdInviteSignupRequestWithBody(server string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s/invite-signup", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1WorkspaceWorkspaceIdKeysRequest generates requests for GetApiV1WorkspaceWorkspaceIdKeys
func NewGetApiV1WorkspaceWorkspaceIdKeysRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1WorkspaceWorkspaceIdLogsRequest generates requests for GetApiV1WorkspaceWorkspaceIdLogs
func NewGetApiV1WorkspaceWorkspaceIdLogsRequest(server string, workspaceId string, params *GetApiV1WorkspaceWorkspaceIdLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ActionNames != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionNames", runtime.ParamLocationQuery, *params.ActionNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1WorkspaceWorkspaceIdNameRequest calls the generic PostApiV1WorkspaceWorkspaceIdName builder with application/json body
func NewPostApiV1WorkspaceWorkspaceIdNameRequest(server string, workspaceId string, body PostApiV1WorkspaceWorkspaceIdNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1WorkspaceWorkspaceIdNameRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewPostApiV1WorkspaceWorkspaceIdNameRequestWithBody generates requests for PostApiV1WorkspaceWorkspaceIdName with any type of body
func NewPostApiV1WorkspaceWorkspaceIdNameRequestWithBody(server string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1WorkspaceWorkspaceIdSecretSnapshotsRequest generates requests for GetApiV1WorkspaceWorkspaceIdSecretSnapshots
func NewGetApiV1WorkspaceWorkspaceIdSecretSnapshotsRequest(server string, workspaceId string, params *GetApiV1WorkspaceWorkspaceIdSecretSnapshotsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s/secret-snapshots", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountRequest generates requests for GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCount
func NewGetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s/secret-snapshots/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackRequest calls the generic PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollback builder with application/json body
func NewPostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackRequest(server string, workspaceId string, body PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewPostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackRequestWithBody generates requests for PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollback with any type of body
func NewPostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackRequestWithBody(server string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s/secret-snapshots/rollback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1WorkspaceWorkspaceIdServiceTokensRequest generates requests for GetApiV1WorkspaceWorkspaceIdServiceTokens
func NewGetApiV1WorkspaceWorkspaceIdServiceTokensRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s/service-tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1WorkspaceWorkspaceIdUsersRequest generates requests for GetApiV1WorkspaceWorkspaceIdUsers
func NewGetApiV1WorkspaceWorkspaceIdUsersRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workspace/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2ApiKeyRequest generates requests for GetApiV2ApiKey
func NewGetApiV2ApiKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/api-key/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2ApiKeyRequest calls the generic PostApiV2ApiKey builder with application/json body
func NewPostApiV2ApiKeyRequest(server string, body PostApiV2ApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2ApiKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2ApiKeyRequestWithBody generates requests for PostApiV2ApiKey with any type of body
func NewPostApiV2ApiKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/api-key/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2ApiKeyApiKeyDataIdRequest generates requests for DeleteApiV2ApiKeyApiKeyDataId
func NewDeleteApiV2ApiKeyApiKeyDataIdRequest(server string, apiKeyDataId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "apiKeyDataId", runtime.ParamLocationPath, apiKeyDataId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/api-key/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdMembershipsRequest generates requests for GetApiV2OrganizationsOrganizationIdMemberships
func NewGetApiV2OrganizationsOrganizationIdMembershipsRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdRequest generates requests for DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipId
func NewDeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdRequest(server string, organizationId string, membershipId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "membershipId", runtime.ParamLocationPath, membershipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/memberships/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdRequest calls the generic PatchApiV2OrganizationsOrganizationIdMembershipsMembershipId builder with application/json body
func NewPatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdRequest(server string, organizationId string, membershipId string, body PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdRequestWithBody(server, organizationId, membershipId, "application/json", bodyReader)
}

// NewPatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdRequestWithBody generates requests for PatchApiV2OrganizationsOrganizationIdMembershipsMembershipId with any type of body
func NewPatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdRequestWithBody(server string, organizationId string, membershipId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "membershipId", runtime.ParamLocationPath, membershipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/memberships/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2OrganizationsOrganizationIdWorkspacesRequest generates requests for GetApiV2OrganizationsOrganizationIdWorkspaces
func NewGetApiV2OrganizationsOrganizationIdWorkspacesRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/organizations/%s/workspaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentRequest calls the generic PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironment builder with application/json body
func NewPostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentRequest(server string, workspaceId string, environment string, body PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentRequestWithBody(server, workspaceId, environment, "application/json", bodyReader)
}

// NewPostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentRequestWithBody generates requests for PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironment with any type of body
func NewPostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentRequestWithBody(server string, workspaceId string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secret/batch-create/workspace/%s/environment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequest calls the generic PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentName builder with application/json body
func NewPatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequest(server string, workspaceId string, environmentName string, body PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody(server, workspaceId, environmentName, "application/json", bodyReader)
}

// NewPatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody generates requests for PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentName with any type of body
func NewPatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody(server string, workspaceId string, environmentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secret/batch-modify/workspace/%s/environment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequest calls the generic DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentName builder with application/json body
func NewDeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequest(server string, workspaceId string, environmentName string, body DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody(server, workspaceId, environmentName, "application/json", bodyReader)
}

// NewDeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody generates requests for DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentName with any type of body
func NewDeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody(server string, workspaceId string, environmentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secret/batch/workspace/%s/environment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2SecretWorkspaceWorkspaceIdRequest generates requests for GetApiV2SecretWorkspaceWorkspaceId
func NewGetApiV2SecretWorkspaceWorkspaceIdRequest(server string, workspaceId string, params *GetApiV2SecretWorkspaceWorkspaceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secret/workspace/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Environment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequest calls the generic PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentName builder with application/json body
func NewPatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequest(server string, workspaceId string, environmentName string, body PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody(server, workspaceId, environmentName, "application/json", bodyReader)
}

// NewPatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody generates requests for PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentName with any type of body
func NewPatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameRequestWithBody(server string, workspaceId string, environmentName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentName", runtime.ParamLocationPath, environmentName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secret/workspace/%s/environment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentRequest calls the generic PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironment builder with application/json body
func NewPostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentRequest(server string, workspaceId string, environment string, body PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentRequestWithBody(server, workspaceId, environment, "application/json", bodyReader)
}

// NewPostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentRequestWithBody generates requests for PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironment with any type of body
func NewPostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentRequestWithBody(server string, workspaceId string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secret/workspace/%s/environment/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2SecretSecretIdRequest generates requests for DeleteApiV2SecretSecretId
func NewDeleteApiV2SecretSecretIdRequest(server string, secretId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secretId", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secret/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2SecretSecretIdRequest generates requests for GetApiV2SecretSecretId
func NewGetApiV2SecretSecretIdRequest(server string, secretId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "secretId", runtime.ParamLocationPath, secretId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secret/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV2SecretsRequest calls the generic DeleteApiV2Secrets builder with application/json body
func NewDeleteApiV2SecretsRequest(server string, body DeleteApiV2SecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV2SecretsRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiV2SecretsRequestWithBody generates requests for DeleteApiV2Secrets with any type of body
func NewDeleteApiV2SecretsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secrets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2SecretsRequest generates requests for GetApiV2Secrets
func NewGetApiV2SecretsRequest(server string, params *GetApiV2SecretsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secrets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workspaceId", runtime.ParamLocationQuery, params.WorkspaceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Content != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content", runtime.ParamLocationQuery, *params.Content); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2SecretsRequest calls the generic PatchApiV2Secrets builder with application/json body
func NewPatchApiV2SecretsRequest(server string, body PatchApiV2SecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2SecretsRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchApiV2SecretsRequestWithBody generates requests for PatchApiV2Secrets with any type of body
func NewPatchApiV2SecretsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secrets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2SecretsRequest calls the generic PostApiV2Secrets builder with application/json body
func NewPostApiV2SecretsRequest(server string, body PostApiV2SecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2SecretsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2SecretsRequestWithBody generates requests for PostApiV2Secrets with any type of body
func NewPostApiV2SecretsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/secrets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2ServiceTokenRequest generates requests for GetApiV2ServiceToken
func NewGetApiV2ServiceTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/service-token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2ServiceTokenRequest calls the generic PostApiV2ServiceToken builder with application/json body
func NewPostApiV2ServiceTokenRequest(server string, body PostApiV2ServiceTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2ServiceTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV2ServiceTokenRequestWithBody generates requests for PostApiV2ServiceToken with any type of body
func NewPostApiV2ServiceTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/service-token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV2ServiceTokenServiceTokenDataIdRequest generates requests for DeleteApiV2ServiceTokenServiceTokenDataId
func NewDeleteApiV2ServiceTokenServiceTokenDataIdRequest(server string, serviceTokenDataId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceTokenDataId", runtime.ParamLocationPath, serviceTokenDataId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/service-token/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2UsersMeRequest generates requests for GetApiV2UsersMe
func NewGetApiV2UsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2UsersMeOrganizationsRequest generates requests for GetApiV2UsersMeOrganizations
func NewGetApiV2UsersMeOrganizationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/users/me/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV2WorkspaceWorkspaceIdEncryptedKeyRequest generates requests for GetApiV2WorkspaceWorkspaceIdEncryptedKey
func NewGetApiV2WorkspaceWorkspaceIdEncryptedKeyRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/workspace/%s/encrypted-key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV2WorkspaceWorkspaceIdEnvironmentsRequest calls the generic DeleteApiV2WorkspaceWorkspaceIdEnvironments builder with application/json body
func NewDeleteApiV2WorkspaceWorkspaceIdEnvironmentsRequest(server string, workspaceId string, body DeleteApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewDeleteApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody generates requests for DeleteApiV2WorkspaceWorkspaceIdEnvironments with any type of body
func NewDeleteApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody(server string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/workspace/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV2WorkspaceWorkspaceIdEnvironmentsRequest calls the generic PostApiV2WorkspaceWorkspaceIdEnvironments builder with application/json body
func NewPostApiV2WorkspaceWorkspaceIdEnvironmentsRequest(server string, workspaceId string, body PostApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewPostApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody generates requests for PostApiV2WorkspaceWorkspaceIdEnvironments with any type of body
func NewPostApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody(server string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/workspace/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiV2WorkspaceWorkspaceIdEnvironmentsRequest calls the generic PutApiV2WorkspaceWorkspaceIdEnvironments builder with application/json body
func NewPutApiV2WorkspaceWorkspaceIdEnvironmentsRequest(server string, workspaceId string, body PutApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewPutApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody generates requests for PutApiV2WorkspaceWorkspaceIdEnvironments with any type of body
func NewPutApiV2WorkspaceWorkspaceIdEnvironmentsRequestWithBody(server string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/workspace/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2WorkspaceWorkspaceIdMembershipsRequest generates requests for GetApiV2WorkspaceWorkspaceIdMemberships
func NewGetApiV2WorkspaceWorkspaceIdMembershipsRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/workspace/%s/memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdRequest generates requests for DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipId
func NewDeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdRequest(server string, workspaceId string, membershipId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "membershipId", runtime.ParamLocationPath, membershipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/workspace/%s/memberships/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdRequest calls the generic PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipId builder with application/json body
func NewPatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdRequest(server string, workspaceId string, membershipId string, body PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdRequestWithBody(server, workspaceId, membershipId, "application/json", bodyReader)
}

// NewPatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdRequestWithBody generates requests for PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipId with any type of body
func NewPatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdRequestWithBody(server string, workspaceId string, membershipId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "membershipId", runtime.ParamLocationPath, membershipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/workspace/%s/memberships/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2WorkspaceWorkspaceIdSecretsRequest generates requests for GetApiV2WorkspaceWorkspaceIdSecrets
func NewGetApiV2WorkspaceWorkspaceIdSecretsRequest(server string, workspaceId string, params *GetApiV2WorkspaceWorkspaceIdSecretsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/workspace/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Environment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Channel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV2WorkspaceWorkspaceIdSecretsRequest calls the generic PostApiV2WorkspaceWorkspaceIdSecrets builder with application/json body
func NewPostApiV2WorkspaceWorkspaceIdSecretsRequest(server string, workspaceId string, body PostApiV2WorkspaceWorkspaceIdSecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV2WorkspaceWorkspaceIdSecretsRequestWithBody(server, workspaceId, "application/json", bodyReader)
}

// NewPostApiV2WorkspaceWorkspaceIdSecretsRequestWithBody generates requests for PostApiV2WorkspaceWorkspaceIdSecrets with any type of body
func NewPostApiV2WorkspaceWorkspaceIdSecretsRequestWithBody(server string, workspaceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/workspace/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV2WorkspaceWorkspaceIdServiceTokenDataRequest generates requests for GetApiV2WorkspaceWorkspaceIdServiceTokenData
func NewGetApiV2WorkspaceWorkspaceIdServiceTokenDataRequest(server string, workspaceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceId", runtime.ParamLocationPath, workspaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/workspace/%s/service-token-data", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiStatus request
	GetApiStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiStatusResponse, error)

	// GetApiV1ActionActionId request
	GetApiV1ActionActionIdWithResponse(ctx context.Context, actionId string, reqEditors ...RequestEditorFn) (*GetApiV1ActionActionIdResponse, error)

	// PostApiV1AuthCheckAuth request
	PostApiV1AuthCheckAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1AuthCheckAuthResponse, error)

	// PostApiV1AuthLogin1 request with any body
	PostApiV1AuthLogin1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthLogin1Response, error)

	PostApiV1AuthLogin1WithResponse(ctx context.Context, body PostApiV1AuthLogin1JSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthLogin1Response, error)

	// PostApiV1AuthLogin2 request with any body
	PostApiV1AuthLogin2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthLogin2Response, error)

	PostApiV1AuthLogin2WithResponse(ctx context.Context, body PostApiV1AuthLogin2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthLogin2Response, error)

	// PostApiV1AuthLogout request
	PostApiV1AuthLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1AuthLogoutResponse, error)

	// PostApiV1AuthToken request
	PostApiV1AuthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1AuthTokenResponse, error)

	// PatchApiV1BotBotIdActive request with any body
	PatchApiV1BotBotIdActiveWithBodyWithResponse(ctx context.Context, botId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1BotBotIdActiveResponse, error)

	PatchApiV1BotBotIdActiveWithResponse(ctx context.Context, botId string, body PatchApiV1BotBotIdActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1BotBotIdActiveResponse, error)

	// GetApiV1BotWorkspaceId request
	GetApiV1BotWorkspaceIdWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1BotWorkspaceIdResponse, error)

	// GetApiV1IntegrationAuthIntegrationOptions request
	GetApiV1IntegrationAuthIntegrationOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IntegrationAuthIntegrationOptionsResponse, error)

	// PostApiV1IntegrationAuthOauthToken request with any body
	PostApiV1IntegrationAuthOauthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IntegrationAuthOauthTokenResponse, error)

	PostApiV1IntegrationAuthOauthTokenWithResponse(ctx context.Context, body PostApiV1IntegrationAuthOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IntegrationAuthOauthTokenResponse, error)

	// DeleteApiV1IntegrationAuthIntegrationAuthId request
	DeleteApiV1IntegrationAuthIntegrationAuthIdWithResponse(ctx context.Context, integrationAuthId string, reqEditors ...RequestEditorFn) (*DeleteApiV1IntegrationAuthIntegrationAuthIdResponse, error)

	// GetApiV1IntegrationAuthIntegrationAuthIdApps request
	GetApiV1IntegrationAuthIntegrationAuthIdAppsWithResponse(ctx context.Context, integrationAuthId string, reqEditors ...RequestEditorFn) (*GetApiV1IntegrationAuthIntegrationAuthIdAppsResponse, error)

	// DeleteApiV1IntegrationIntegrationId request
	DeleteApiV1IntegrationIntegrationIdWithResponse(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*DeleteApiV1IntegrationIntegrationIdResponse, error)

	// PatchApiV1IntegrationIntegrationId request with any body
	PatchApiV1IntegrationIntegrationIdWithBodyWithResponse(ctx context.Context, integrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1IntegrationIntegrationIdResponse, error)

	PatchApiV1IntegrationIntegrationIdWithResponse(ctx context.Context, integrationId string, body PatchApiV1IntegrationIntegrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1IntegrationIntegrationIdResponse, error)

	// PostApiV1InviteOrgSignup request with any body
	PostApiV1InviteOrgSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1InviteOrgSignupResponse, error)

	PostApiV1InviteOrgSignupWithResponse(ctx context.Context, body PostApiV1InviteOrgSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1InviteOrgSignupResponse, error)

	// PostApiV1InviteOrgVerify request with any body
	PostApiV1InviteOrgVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1InviteOrgVerifyResponse, error)

	PostApiV1InviteOrgVerifyWithResponse(ctx context.Context, body PostApiV1InviteOrgVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1InviteOrgVerifyResponse, error)

	// PostApiV1KeyWorkspaceId request with any body
	PostApiV1KeyWorkspaceIdWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1KeyWorkspaceIdResponse, error)

	PostApiV1KeyWorkspaceIdWithResponse(ctx context.Context, workspaceId string, body PostApiV1KeyWorkspaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1KeyWorkspaceIdResponse, error)

	// GetApiV1KeyWorkspaceIdLatest request
	GetApiV1KeyWorkspaceIdLatestWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1KeyWorkspaceIdLatestResponse, error)

	// PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRole request
	PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleWithResponse(ctx context.Context, membershipOrgId string, reqEditors ...RequestEditorFn) (*PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleResponse, error)

	// DeleteApiV1MembershipOrgMembershipOrgId request
	DeleteApiV1MembershipOrgMembershipOrgIdWithResponse(ctx context.Context, membershipOrgId string, reqEditors ...RequestEditorFn) (*DeleteApiV1MembershipOrgMembershipOrgIdResponse, error)

	// DeleteApiV1MembershipMembershipId request
	DeleteApiV1MembershipMembershipIdWithResponse(ctx context.Context, membershipId string, reqEditors ...RequestEditorFn) (*DeleteApiV1MembershipMembershipIdResponse, error)

	// PostApiV1MembershipMembershipIdChangeRole request with any body
	PostApiV1MembershipMembershipIdChangeRoleWithBodyWithResponse(ctx context.Context, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1MembershipMembershipIdChangeRoleResponse, error)

	PostApiV1MembershipMembershipIdChangeRoleWithResponse(ctx context.Context, membershipId string, body PostApiV1MembershipMembershipIdChangeRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1MembershipMembershipIdChangeRoleResponse, error)

	// GetApiV1MembershipWorkspaceIdConnect request
	GetApiV1MembershipWorkspaceIdConnectWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1MembershipWorkspaceIdConnectResponse, error)

	// GetApiV1Organization request
	GetApiV1OrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationResponse, error)

	// PostApiV1Organization request with any body
	PostApiV1OrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationResponse, error)

	PostApiV1OrganizationWithResponse(ctx context.Context, body PostApiV1OrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationResponse, error)

	// GetApiV1OrganizationOrganizationId request
	GetApiV1OrganizationOrganizationIdWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationOrganizationIdResponse, error)

	// PostApiV1OrganizationOrganizationIdCustomerPortalSession request
	PostApiV1OrganizationOrganizationIdCustomerPortalSessionWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationOrganizationIdCustomerPortalSessionResponse, error)

	// DeleteApiV1OrganizationOrganizationIdIncidentContactOrg request with any body
	DeleteApiV1OrganizationOrganizationIdIncidentContactOrgWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error)

	DeleteApiV1OrganizationOrganizationIdIncidentContactOrgWithResponse(ctx context.Context, organizationId string, body DeleteApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error)

	// GetApiV1OrganizationOrganizationIdIncidentContactOrg request
	GetApiV1OrganizationOrganizationIdIncidentContactOrgWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error)

	// PostApiV1OrganizationOrganizationIdIncidentContactOrg request with any body
	PostApiV1OrganizationOrganizationIdIncidentContactOrgWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error)

	PostApiV1OrganizationOrganizationIdIncidentContactOrgWithResponse(ctx context.Context, organizationId string, body PostApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error)

	// GetApiV1OrganizationOrganizationIdMyWorkspaces request
	GetApiV1OrganizationOrganizationIdMyWorkspacesWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationOrganizationIdMyWorkspacesResponse, error)

	// PatchApiV1OrganizationOrganizationIdName request with any body
	PatchApiV1OrganizationOrganizationIdNameWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1OrganizationOrganizationIdNameResponse, error)

	PatchApiV1OrganizationOrganizationIdNameWithResponse(ctx context.Context, organizationId string, body PatchApiV1OrganizationOrganizationIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1OrganizationOrganizationIdNameResponse, error)

	// GetApiV1OrganizationOrganizationIdSubscriptions request
	GetApiV1OrganizationOrganizationIdSubscriptionsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationOrganizationIdSubscriptionsResponse, error)

	// GetApiV1OrganizationOrganizationIdUsers request
	GetApiV1OrganizationOrganizationIdUsersWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationOrganizationIdUsersResponse, error)

	// GetApiV1PasswordBackupPrivateKey request
	GetApiV1PasswordBackupPrivateKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1PasswordBackupPrivateKeyResponse, error)

	// PostApiV1PasswordBackupPrivateKey request with any body
	PostApiV1PasswordBackupPrivateKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordBackupPrivateKeyResponse, error)

	PostApiV1PasswordBackupPrivateKeyWithResponse(ctx context.Context, body PostApiV1PasswordBackupPrivateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordBackupPrivateKeyResponse, error)

	// PostApiV1PasswordChangePassword request with any body
	PostApiV1PasswordChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordChangePasswordResponse, error)

	PostApiV1PasswordChangePasswordWithResponse(ctx context.Context, body PostApiV1PasswordChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordChangePasswordResponse, error)

	// PostApiV1PasswordEmailPasswordReset request with any body
	PostApiV1PasswordEmailPasswordResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordEmailPasswordResetResponse, error)

	PostApiV1PasswordEmailPasswordResetWithResponse(ctx context.Context, body PostApiV1PasswordEmailPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordEmailPasswordResetResponse, error)

	// PostApiV1PasswordEmailPasswordResetVerify request with any body
	PostApiV1PasswordEmailPasswordResetVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordEmailPasswordResetVerifyResponse, error)

	PostApiV1PasswordEmailPasswordResetVerifyWithResponse(ctx context.Context, body PostApiV1PasswordEmailPasswordResetVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordEmailPasswordResetVerifyResponse, error)

	// PostApiV1PasswordPasswordReset request with any body
	PostApiV1PasswordPasswordResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordPasswordResetResponse, error)

	PostApiV1PasswordPasswordResetWithResponse(ctx context.Context, body PostApiV1PasswordPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordPasswordResetResponse, error)

	// PostApiV1PasswordSrp1 request with any body
	PostApiV1PasswordSrp1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordSrp1Response, error)

	PostApiV1PasswordSrp1WithResponse(ctx context.Context, body PostApiV1PasswordSrp1JSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordSrp1Response, error)

	// GetApiV1SecretSnapshotSecretSnapshotId request
	GetApiV1SecretSnapshotSecretSnapshotIdWithResponse(ctx context.Context, secretSnapshotId string, reqEditors ...RequestEditorFn) (*GetApiV1SecretSnapshotSecretSnapshotIdResponse, error)

	// GetApiV1SecretSecretIdSecretVersions request
	GetApiV1SecretSecretIdSecretVersionsWithResponse(ctx context.Context, secretId string, params *GetApiV1SecretSecretIdSecretVersionsParams, reqEditors ...RequestEditorFn) (*GetApiV1SecretSecretIdSecretVersionsResponse, error)

	// PostApiV1SecretSecretIdSecretVersionsRollback request with any body
	PostApiV1SecretSecretIdSecretVersionsRollbackWithBodyWithResponse(ctx context.Context, secretId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SecretSecretIdSecretVersionsRollbackResponse, error)

	PostApiV1SecretSecretIdSecretVersionsRollbackWithResponse(ctx context.Context, secretId string, body PostApiV1SecretSecretIdSecretVersionsRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SecretSecretIdSecretVersionsRollbackResponse, error)

	// GetApiV1SecretWorkspaceId request
	GetApiV1SecretWorkspaceIdWithResponse(ctx context.Context, workspaceId string, params *GetApiV1SecretWorkspaceIdParams, reqEditors ...RequestEditorFn) (*GetApiV1SecretWorkspaceIdResponse, error)

	// PostApiV1SecretWorkspaceId request with any body
	PostApiV1SecretWorkspaceIdWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SecretWorkspaceIdResponse, error)

	PostApiV1SecretWorkspaceIdWithResponse(ctx context.Context, workspaceId string, body PostApiV1SecretWorkspaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SecretWorkspaceIdResponse, error)

	// GetApiV1SecretWorkspaceIdServiceToken request
	GetApiV1SecretWorkspaceIdServiceTokenWithResponse(ctx context.Context, workspaceId string, params *GetApiV1SecretWorkspaceIdServiceTokenParams, reqEditors ...RequestEditorFn) (*GetApiV1SecretWorkspaceIdServiceTokenResponse, error)

	// GetApiV1ServiceToken request
	GetApiV1ServiceTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ServiceTokenResponse, error)

	// PostApiV1ServiceToken request with any body
	PostApiV1ServiceTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ServiceTokenResponse, error)

	PostApiV1ServiceTokenWithResponse(ctx context.Context, body PostApiV1ServiceTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ServiceTokenResponse, error)

	// PostApiV1SignupCompleteAccountInvite request with any body
	PostApiV1SignupCompleteAccountInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SignupCompleteAccountInviteResponse, error)

	PostApiV1SignupCompleteAccountInviteWithResponse(ctx context.Context, body PostApiV1SignupCompleteAccountInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SignupCompleteAccountInviteResponse, error)

	// PostApiV1SignupCompleteAccountSignup request with any body
	PostApiV1SignupCompleteAccountSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SignupCompleteAccountSignupResponse, error)

	PostApiV1SignupCompleteAccountSignupWithResponse(ctx context.Context, body PostApiV1SignupCompleteAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SignupCompleteAccountSignupResponse, error)

	// PostApiV1SignupEmailSignup request with any body
	PostApiV1SignupEmailSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SignupEmailSignupResponse, error)

	PostApiV1SignupEmailSignupWithResponse(ctx context.Context, body PostApiV1SignupEmailSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SignupEmailSignupResponse, error)

	// PostApiV1SignupEmailVerify request with any body
	PostApiV1SignupEmailVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SignupEmailVerifyResponse, error)

	PostApiV1SignupEmailVerifyWithResponse(ctx context.Context, body PostApiV1SignupEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SignupEmailVerifyResponse, error)

	// PostApiV1StripeWebhook request
	PostApiV1StripeWebhookWithResponse(ctx context.Context, params *PostApiV1StripeWebhookParams, reqEditors ...RequestEditorFn) (*PostApiV1StripeWebhookResponse, error)

	// GetApiV1UserAction request
	GetApiV1UserActionWithResponse(ctx context.Context, params *GetApiV1UserActionParams, reqEditors ...RequestEditorFn) (*GetApiV1UserActionResponse, error)

	// PostApiV1UserAction request with any body
	PostApiV1UserActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1UserActionResponse, error)

	PostApiV1UserActionWithResponse(ctx context.Context, body PostApiV1UserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1UserActionResponse, error)

	// GetApiV1User request
	GetApiV1UserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1UserResponse, error)

	// GetApiV1Workspace request
	GetApiV1WorkspaceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceResponse, error)

	// PostApiV1Workspace request with any body
	PostApiV1WorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceResponse, error)

	PostApiV1WorkspaceWithResponse(ctx context.Context, body PostApiV1WorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceResponse, error)

	// DeleteApiV1WorkspaceWorkspaceId request
	DeleteApiV1WorkspaceWorkspaceIdWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*DeleteApiV1WorkspaceWorkspaceIdResponse, error)

	// GetApiV1WorkspaceWorkspaceId request
	GetApiV1WorkspaceWorkspaceIdWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdResponse, error)

	// GetApiV1WorkspaceWorkspaceIdAuthorizations request
	GetApiV1WorkspaceWorkspaceIdAuthorizationsWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdAuthorizationsResponse, error)

	// GetApiV1WorkspaceWorkspaceIdIntegrations request
	GetApiV1WorkspaceWorkspaceIdIntegrationsWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdIntegrationsResponse, error)

	// PostApiV1WorkspaceWorkspaceIdInviteSignup request with any body
	PostApiV1WorkspaceWorkspaceIdInviteSignupWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdInviteSignupResponse, error)

	PostApiV1WorkspaceWorkspaceIdInviteSignupWithResponse(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdInviteSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdInviteSignupResponse, error)

	// GetApiV1WorkspaceWorkspaceIdKeys request
	GetApiV1WorkspaceWorkspaceIdKeysWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdKeysResponse, error)

	// GetApiV1WorkspaceWorkspaceIdLogs request
	GetApiV1WorkspaceWorkspaceIdLogsWithResponse(ctx context.Context, workspaceId string, params *GetApiV1WorkspaceWorkspaceIdLogsParams, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdLogsResponse, error)

	// PostApiV1WorkspaceWorkspaceIdName request with any body
	PostApiV1WorkspaceWorkspaceIdNameWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdNameResponse, error)

	PostApiV1WorkspaceWorkspaceIdNameWithResponse(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdNameResponse, error)

	// GetApiV1WorkspaceWorkspaceIdSecretSnapshots request
	GetApiV1WorkspaceWorkspaceIdSecretSnapshotsWithResponse(ctx context.Context, workspaceId string, params *GetApiV1WorkspaceWorkspaceIdSecretSnapshotsParams, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdSecretSnapshotsResponse, error)

	// GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCount request
	GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountResponse, error)

	// PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollback request with any body
	PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse, error)

	PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackWithResponse(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse, error)

	// GetApiV1WorkspaceWorkspaceIdServiceTokens request
	GetApiV1WorkspaceWorkspaceIdServiceTokensWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdServiceTokensResponse, error)

	// GetApiV1WorkspaceWorkspaceIdUsers request
	GetApiV1WorkspaceWorkspaceIdUsersWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdUsersResponse, error)

	// GetApiV2ApiKey request
	GetApiV2ApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2ApiKeyResponse, error)

	// PostApiV2ApiKey request with any body
	PostApiV2ApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ApiKeyResponse, error)

	PostApiV2ApiKeyWithResponse(ctx context.Context, body PostApiV2ApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ApiKeyResponse, error)

	// DeleteApiV2ApiKeyApiKeyDataId request
	DeleteApiV2ApiKeyApiKeyDataIdWithResponse(ctx context.Context, apiKeyDataId string, reqEditors ...RequestEditorFn) (*DeleteApiV2ApiKeyApiKeyDataIdResponse, error)

	// GetApiV2OrganizationsOrganizationIdMemberships request
	GetApiV2OrganizationsOrganizationIdMembershipsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdMembershipsResponse, error)

	// DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipId request
	DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithResponse(ctx context.Context, organizationId string, membershipId string, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse, error)

	// PatchApiV2OrganizationsOrganizationIdMembershipsMembershipId request with any body
	PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithBodyWithResponse(ctx context.Context, organizationId string, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse, error)

	PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithResponse(ctx context.Context, organizationId string, membershipId string, body PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse, error)

	// GetApiV2OrganizationsOrganizationIdWorkspaces request
	GetApiV2OrganizationsOrganizationIdWorkspacesWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdWorkspacesResponse, error)

	// PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironment request with any body
	PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentWithBodyWithResponse(ctx context.Context, workspaceId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse, error)

	PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentWithResponse(ctx context.Context, workspaceId string, environment string, body PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse, error)

	// PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentName request with any body
	PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBodyWithResponse(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error)

	PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithResponse(ctx context.Context, workspaceId string, environmentName string, body PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error)

	// DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentName request with any body
	DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBodyWithResponse(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error)

	DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithResponse(ctx context.Context, workspaceId string, environmentName string, body DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error)

	// GetApiV2SecretWorkspaceWorkspaceId request
	GetApiV2SecretWorkspaceWorkspaceIdWithResponse(ctx context.Context, workspaceId string, params *GetApiV2SecretWorkspaceWorkspaceIdParams, reqEditors ...RequestEditorFn) (*GetApiV2SecretWorkspaceWorkspaceIdResponse, error)

	// PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentName request with any body
	PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBodyWithResponse(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error)

	PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithResponse(ctx context.Context, workspaceId string, environmentName string, body PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error)

	// PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironment request with any body
	PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentWithBodyWithResponse(ctx context.Context, workspaceId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse, error)

	PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentWithResponse(ctx context.Context, workspaceId string, environment string, body PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse, error)

	// DeleteApiV2SecretSecretId request
	DeleteApiV2SecretSecretIdWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*DeleteApiV2SecretSecretIdResponse, error)

	// GetApiV2SecretSecretId request
	GetApiV2SecretSecretIdWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*GetApiV2SecretSecretIdResponse, error)

	// DeleteApiV2Secrets request with any body
	DeleteApiV2SecretsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV2SecretsResponse, error)

	DeleteApiV2SecretsWithResponse(ctx context.Context, body DeleteApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV2SecretsResponse, error)

	// GetApiV2Secrets request
	GetApiV2SecretsWithResponse(ctx context.Context, params *GetApiV2SecretsParams, reqEditors ...RequestEditorFn) (*GetApiV2SecretsResponse, error)

	// PatchApiV2Secrets request with any body
	PatchApiV2SecretsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2SecretsResponse, error)

	PatchApiV2SecretsWithResponse(ctx context.Context, body PatchApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2SecretsResponse, error)

	// PostApiV2Secrets request with any body
	PostApiV2SecretsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2SecretsResponse, error)

	PostApiV2SecretsWithResponse(ctx context.Context, body PostApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2SecretsResponse, error)

	// GetApiV2ServiceToken request
	GetApiV2ServiceTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2ServiceTokenResponse, error)

	// PostApiV2ServiceToken request with any body
	PostApiV2ServiceTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ServiceTokenResponse, error)

	PostApiV2ServiceTokenWithResponse(ctx context.Context, body PostApiV2ServiceTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ServiceTokenResponse, error)

	// DeleteApiV2ServiceTokenServiceTokenDataId request
	DeleteApiV2ServiceTokenServiceTokenDataIdWithResponse(ctx context.Context, serviceTokenDataId string, reqEditors ...RequestEditorFn) (*DeleteApiV2ServiceTokenServiceTokenDataIdResponse, error)

	// GetApiV2UsersMe request
	GetApiV2UsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2UsersMeResponse, error)

	// GetApiV2UsersMeOrganizations request
	GetApiV2UsersMeOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2UsersMeOrganizationsResponse, error)

	// GetApiV2WorkspaceWorkspaceIdEncryptedKey request
	GetApiV2WorkspaceWorkspaceIdEncryptedKeyWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV2WorkspaceWorkspaceIdEncryptedKeyResponse, error)

	// DeleteApiV2WorkspaceWorkspaceIdEnvironments request with any body
	DeleteApiV2WorkspaceWorkspaceIdEnvironmentsWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error)

	DeleteApiV2WorkspaceWorkspaceIdEnvironmentsWithResponse(ctx context.Context, workspaceId string, body DeleteApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error)

	// PostApiV2WorkspaceWorkspaceIdEnvironments request with any body
	PostApiV2WorkspaceWorkspaceIdEnvironmentsWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error)

	PostApiV2WorkspaceWorkspaceIdEnvironmentsWithResponse(ctx context.Context, workspaceId string, body PostApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error)

	// PutApiV2WorkspaceWorkspaceIdEnvironments request with any body
	PutApiV2WorkspaceWorkspaceIdEnvironmentsWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error)

	PutApiV2WorkspaceWorkspaceIdEnvironmentsWithResponse(ctx context.Context, workspaceId string, body PutApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error)

	// GetApiV2WorkspaceWorkspaceIdMemberships request
	GetApiV2WorkspaceWorkspaceIdMembershipsWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV2WorkspaceWorkspaceIdMembershipsResponse, error)

	// DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipId request
	DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithResponse(ctx context.Context, workspaceId string, membershipId string, reqEditors ...RequestEditorFn) (*DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse, error)

	// PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipId request with any body
	PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithBodyWithResponse(ctx context.Context, workspaceId string, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse, error)

	PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithResponse(ctx context.Context, workspaceId string, membershipId string, body PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse, error)

	// GetApiV2WorkspaceWorkspaceIdSecrets request
	GetApiV2WorkspaceWorkspaceIdSecretsWithResponse(ctx context.Context, workspaceId string, params *GetApiV2WorkspaceWorkspaceIdSecretsParams, reqEditors ...RequestEditorFn) (*GetApiV2WorkspaceWorkspaceIdSecretsResponse, error)

	// PostApiV2WorkspaceWorkspaceIdSecrets request with any body
	PostApiV2WorkspaceWorkspaceIdSecretsWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2WorkspaceWorkspaceIdSecretsResponse, error)

	PostApiV2WorkspaceWorkspaceIdSecretsWithResponse(ctx context.Context, workspaceId string, body PostApiV2WorkspaceWorkspaceIdSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2WorkspaceWorkspaceIdSecretsResponse, error)

	// GetApiV2WorkspaceWorkspaceIdServiceTokenData request
	GetApiV2WorkspaceWorkspaceIdServiceTokenDataWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV2WorkspaceWorkspaceIdServiceTokenDataResponse, error)
}

type GetApiStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ActionActionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1ActionActionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ActionActionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AuthCheckAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1AuthCheckAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AuthCheckAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AuthLogin1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1AuthLogin1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AuthLogin1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AuthLogin2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1AuthLogin2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AuthLogin2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AuthLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1AuthLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AuthLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1AuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV1BotBotIdActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchApiV1BotBotIdActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV1BotBotIdActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1BotWorkspaceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1BotWorkspaceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1BotWorkspaceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IntegrationAuthIntegrationOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1IntegrationAuthIntegrationOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IntegrationAuthIntegrationOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1IntegrationAuthOauthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1IntegrationAuthOauthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1IntegrationAuthOauthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1IntegrationAuthIntegrationAuthIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1IntegrationAuthIntegrationAuthIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1IntegrationAuthIntegrationAuthIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1IntegrationAuthIntegrationAuthIdAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1IntegrationAuthIntegrationAuthIdAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1IntegrationAuthIntegrationAuthIdAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1IntegrationIntegrationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1IntegrationIntegrationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1IntegrationIntegrationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV1IntegrationIntegrationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchApiV1IntegrationIntegrationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV1IntegrationIntegrationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1InviteOrgSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1InviteOrgSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1InviteOrgSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1InviteOrgVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1InviteOrgVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1InviteOrgVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1KeyWorkspaceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1KeyWorkspaceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1KeyWorkspaceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1KeyWorkspaceIdLatestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1KeyWorkspaceIdLatestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1KeyWorkspaceIdLatestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1MembershipOrgMembershipOrgIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1MembershipOrgMembershipOrgIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1MembershipOrgMembershipOrgIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1MembershipMembershipIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1MembershipMembershipIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1MembershipMembershipIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1MembershipMembershipIdChangeRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1MembershipMembershipIdChangeRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1MembershipMembershipIdChangeRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1MembershipWorkspaceIdConnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1MembershipWorkspaceIdConnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1MembershipWorkspaceIdConnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1OrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1OrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1OrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationOrganizationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationOrganizationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationOrganizationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1OrganizationOrganizationIdCustomerPortalSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1OrganizationOrganizationIdCustomerPortalSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1OrganizationOrganizationIdCustomerPortalSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationOrganizationIdIncidentContactOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationOrganizationIdIncidentContactOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationOrganizationIdIncidentContactOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1OrganizationOrganizationIdIncidentContactOrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1OrganizationOrganizationIdIncidentContactOrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1OrganizationOrganizationIdIncidentContactOrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationOrganizationIdMyWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationOrganizationIdMyWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationOrganizationIdMyWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV1OrganizationOrganizationIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchApiV1OrganizationOrganizationIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV1OrganizationOrganizationIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationOrganizationIdSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationOrganizationIdSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationOrganizationIdSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationOrganizationIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationOrganizationIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationOrganizationIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PasswordBackupPrivateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1PasswordBackupPrivateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PasswordBackupPrivateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PasswordBackupPrivateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1PasswordBackupPrivateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PasswordBackupPrivateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PasswordChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1PasswordChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PasswordChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PasswordEmailPasswordResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1PasswordEmailPasswordResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PasswordEmailPasswordResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PasswordEmailPasswordResetVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1PasswordEmailPasswordResetVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PasswordEmailPasswordResetVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PasswordPasswordResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1PasswordPasswordResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PasswordPasswordResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PasswordSrp1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1PasswordSrp1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PasswordSrp1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SecretSnapshotSecretSnapshotIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1SecretSnapshotSecretSnapshotIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SecretSnapshotSecretSnapshotIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SecretSecretIdSecretVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// SecretVersions Secret versions
		SecretVersions *[]SecretVersion `json:"secretVersions,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1SecretSecretIdSecretVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SecretSecretIdSecretVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SecretSecretIdSecretVersionsRollbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Secret *Secret `json:"secret,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1SecretSecretIdSecretVersionsRollbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SecretSecretIdSecretVersionsRollbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SecretWorkspaceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1SecretWorkspaceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SecretWorkspaceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SecretWorkspaceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1SecretWorkspaceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SecretWorkspaceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SecretWorkspaceIdServiceTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1SecretWorkspaceIdServiceTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SecretWorkspaceIdServiceTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ServiceTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1ServiceTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ServiceTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ServiceTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1ServiceTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ServiceTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SignupCompleteAccountInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1SignupCompleteAccountInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SignupCompleteAccountInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SignupCompleteAccountSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1SignupCompleteAccountSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SignupCompleteAccountSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SignupEmailSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1SignupEmailSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SignupEmailSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1SignupEmailVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1SignupEmailVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1SignupEmailVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1StripeWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1StripeWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1StripeWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1UserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1UserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1UserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1UserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1UserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1UserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1UserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1UserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1UserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1WorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1WorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1WorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1WorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1WorkspaceWorkspaceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1WorkspaceWorkspaceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1WorkspaceWorkspaceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WorkspaceWorkspaceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1WorkspaceWorkspaceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WorkspaceWorkspaceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WorkspaceWorkspaceIdAuthorizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1WorkspaceWorkspaceIdAuthorizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WorkspaceWorkspaceIdAuthorizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WorkspaceWorkspaceIdIntegrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1WorkspaceWorkspaceIdIntegrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WorkspaceWorkspaceIdIntegrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1WorkspaceWorkspaceIdInviteSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1WorkspaceWorkspaceIdInviteSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1WorkspaceWorkspaceIdInviteSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WorkspaceWorkspaceIdKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1WorkspaceWorkspaceIdKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WorkspaceWorkspaceIdKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WorkspaceWorkspaceIdLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Logs Project logs
		Logs *[]Log `json:"logs,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1WorkspaceWorkspaceIdLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WorkspaceWorkspaceIdLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1WorkspaceWorkspaceIdNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1WorkspaceWorkspaceIdNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1WorkspaceWorkspaceIdNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WorkspaceWorkspaceIdSecretSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// SecretSnapshots Project secret snapshots
		SecretSnapshots *[]SecretSnapshot `json:"secretSnapshots,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1WorkspaceWorkspaceIdSecretSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WorkspaceWorkspaceIdSecretSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Secrets Secrets rolled back to
		Secrets *[]Secret `json:"secrets,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WorkspaceWorkspaceIdServiceTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1WorkspaceWorkspaceIdServiceTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WorkspaceWorkspaceIdServiceTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WorkspaceWorkspaceIdUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1WorkspaceWorkspaceIdUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WorkspaceWorkspaceIdUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV2ApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2ApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV2ApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2ApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2ApiKeyApiKeyDataIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2ApiKeyApiKeyDataIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2ApiKeyApiKeyDataIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Memberships Memberships of organization
		Memberships *[]MembershipOrg `json:"memberships,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Membership *MembershipOrg `json:"membership,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Membership *MembershipOrg `json:"membership,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2OrganizationsOrganizationIdWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Workspaces Projects of organization
		Workspaces *[]Project `json:"workspaces,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV2OrganizationsOrganizationIdWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2OrganizationsOrganizationIdWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2SecretWorkspaceWorkspaceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV2SecretWorkspaceWorkspaceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2SecretWorkspaceWorkspaceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2SecretSecretIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2SecretSecretIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2SecretSecretIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2SecretSecretIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV2SecretSecretIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2SecretSecretIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2SecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Secrets Deleted secrets
		Secrets *[]Secret `json:"secrets,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2SecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2SecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2SecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Secrets Secrets for the given project and environment
		Secrets *[]Secret `json:"secrets,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV2SecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2SecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2SecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Secrets Updated secrets
		Secrets *[]Secret `json:"secrets,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchApiV2SecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2SecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2SecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Secrets Newly-created secrets for the given project and environment
		Secrets *[]Secret `json:"secrets,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV2SecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2SecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2ServiceTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV2ServiceTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2ServiceTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2ServiceTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV2ServiceTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2ServiceTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2ServiceTokenServiceTokenDataIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2ServiceTokenServiceTokenDataIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2ServiceTokenServiceTokenDataIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2UsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		User *CurrentUser `json:"user,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV2UsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2UsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2UsersMeOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Organizations Organizations that user is part of
		Organizations *[]Organization `json:"organizations,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV2UsersMeOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2UsersMeOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2WorkspaceWorkspaceIdEncryptedKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProjectKey
}

// Status returns HTTPResponse.Status
func (r GetApiV2WorkspaceWorkspaceIdEncryptedKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2WorkspaceWorkspaceIdEncryptedKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2WorkspaceWorkspaceIdEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV2WorkspaceWorkspaceIdEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2WorkspaceWorkspaceIdEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV2WorkspaceWorkspaceIdEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiV2WorkspaceWorkspaceIdEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV2WorkspaceWorkspaceIdEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2WorkspaceWorkspaceIdMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Memberships Memberships of project
		Memberships *[]Membership `json:"memberships,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV2WorkspaceWorkspaceIdMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2WorkspaceWorkspaceIdMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Membership *Membership `json:"membership,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Membership *Membership `json:"membership,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2WorkspaceWorkspaceIdSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV2WorkspaceWorkspaceIdSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2WorkspaceWorkspaceIdSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV2WorkspaceWorkspaceIdSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV2WorkspaceWorkspaceIdSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV2WorkspaceWorkspaceIdSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV2WorkspaceWorkspaceIdServiceTokenDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV2WorkspaceWorkspaceIdServiceTokenDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV2WorkspaceWorkspaceIdServiceTokenDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiStatusWithResponse request returning *GetApiStatusResponse
func (c *ClientWithResponses) GetApiStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiStatusResponse, error) {
	rsp, err := c.GetApiStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiStatusResponse(rsp)
}

// GetApiV1ActionActionIdWithResponse request returning *GetApiV1ActionActionIdResponse
func (c *ClientWithResponses) GetApiV1ActionActionIdWithResponse(ctx context.Context, actionId string, reqEditors ...RequestEditorFn) (*GetApiV1ActionActionIdResponse, error) {
	rsp, err := c.GetApiV1ActionActionId(ctx, actionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ActionActionIdResponse(rsp)
}

// PostApiV1AuthCheckAuthWithResponse request returning *PostApiV1AuthCheckAuthResponse
func (c *ClientWithResponses) PostApiV1AuthCheckAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1AuthCheckAuthResponse, error) {
	rsp, err := c.PostApiV1AuthCheckAuth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthCheckAuthResponse(rsp)
}

// PostApiV1AuthLogin1WithBodyWithResponse request with arbitrary body returning *PostApiV1AuthLogin1Response
func (c *ClientWithResponses) PostApiV1AuthLogin1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthLogin1Response, error) {
	rsp, err := c.PostApiV1AuthLogin1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthLogin1Response(rsp)
}

func (c *ClientWithResponses) PostApiV1AuthLogin1WithResponse(ctx context.Context, body PostApiV1AuthLogin1JSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthLogin1Response, error) {
	rsp, err := c.PostApiV1AuthLogin1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthLogin1Response(rsp)
}

// PostApiV1AuthLogin2WithBodyWithResponse request with arbitrary body returning *PostApiV1AuthLogin2Response
func (c *ClientWithResponses) PostApiV1AuthLogin2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthLogin2Response, error) {
	rsp, err := c.PostApiV1AuthLogin2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthLogin2Response(rsp)
}

func (c *ClientWithResponses) PostApiV1AuthLogin2WithResponse(ctx context.Context, body PostApiV1AuthLogin2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthLogin2Response, error) {
	rsp, err := c.PostApiV1AuthLogin2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthLogin2Response(rsp)
}

// PostApiV1AuthLogoutWithResponse request returning *PostApiV1AuthLogoutResponse
func (c *ClientWithResponses) PostApiV1AuthLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1AuthLogoutResponse, error) {
	rsp, err := c.PostApiV1AuthLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthLogoutResponse(rsp)
}

// PostApiV1AuthTokenWithResponse request returning *PostApiV1AuthTokenResponse
func (c *ClientWithResponses) PostApiV1AuthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1AuthTokenResponse, error) {
	rsp, err := c.PostApiV1AuthToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthTokenResponse(rsp)
}

// PatchApiV1BotBotIdActiveWithBodyWithResponse request with arbitrary body returning *PatchApiV1BotBotIdActiveResponse
func (c *ClientWithResponses) PatchApiV1BotBotIdActiveWithBodyWithResponse(ctx context.Context, botId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1BotBotIdActiveResponse, error) {
	rsp, err := c.PatchApiV1BotBotIdActiveWithBody(ctx, botId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1BotBotIdActiveResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV1BotBotIdActiveWithResponse(ctx context.Context, botId string, body PatchApiV1BotBotIdActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1BotBotIdActiveResponse, error) {
	rsp, err := c.PatchApiV1BotBotIdActive(ctx, botId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1BotBotIdActiveResponse(rsp)
}

// GetApiV1BotWorkspaceIdWithResponse request returning *GetApiV1BotWorkspaceIdResponse
func (c *ClientWithResponses) GetApiV1BotWorkspaceIdWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1BotWorkspaceIdResponse, error) {
	rsp, err := c.GetApiV1BotWorkspaceId(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1BotWorkspaceIdResponse(rsp)
}

// GetApiV1IntegrationAuthIntegrationOptionsWithResponse request returning *GetApiV1IntegrationAuthIntegrationOptionsResponse
func (c *ClientWithResponses) GetApiV1IntegrationAuthIntegrationOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1IntegrationAuthIntegrationOptionsResponse, error) {
	rsp, err := c.GetApiV1IntegrationAuthIntegrationOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IntegrationAuthIntegrationOptionsResponse(rsp)
}

// PostApiV1IntegrationAuthOauthTokenWithBodyWithResponse request with arbitrary body returning *PostApiV1IntegrationAuthOauthTokenResponse
func (c *ClientWithResponses) PostApiV1IntegrationAuthOauthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1IntegrationAuthOauthTokenResponse, error) {
	rsp, err := c.PostApiV1IntegrationAuthOauthTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IntegrationAuthOauthTokenResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1IntegrationAuthOauthTokenWithResponse(ctx context.Context, body PostApiV1IntegrationAuthOauthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1IntegrationAuthOauthTokenResponse, error) {
	rsp, err := c.PostApiV1IntegrationAuthOauthToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1IntegrationAuthOauthTokenResponse(rsp)
}

// DeleteApiV1IntegrationAuthIntegrationAuthIdWithResponse request returning *DeleteApiV1IntegrationAuthIntegrationAuthIdResponse
func (c *ClientWithResponses) DeleteApiV1IntegrationAuthIntegrationAuthIdWithResponse(ctx context.Context, integrationAuthId string, reqEditors ...RequestEditorFn) (*DeleteApiV1IntegrationAuthIntegrationAuthIdResponse, error) {
	rsp, err := c.DeleteApiV1IntegrationAuthIntegrationAuthId(ctx, integrationAuthId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1IntegrationAuthIntegrationAuthIdResponse(rsp)
}

// GetApiV1IntegrationAuthIntegrationAuthIdAppsWithResponse request returning *GetApiV1IntegrationAuthIntegrationAuthIdAppsResponse
func (c *ClientWithResponses) GetApiV1IntegrationAuthIntegrationAuthIdAppsWithResponse(ctx context.Context, integrationAuthId string, reqEditors ...RequestEditorFn) (*GetApiV1IntegrationAuthIntegrationAuthIdAppsResponse, error) {
	rsp, err := c.GetApiV1IntegrationAuthIntegrationAuthIdApps(ctx, integrationAuthId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1IntegrationAuthIntegrationAuthIdAppsResponse(rsp)
}

// DeleteApiV1IntegrationIntegrationIdWithResponse request returning *DeleteApiV1IntegrationIntegrationIdResponse
func (c *ClientWithResponses) DeleteApiV1IntegrationIntegrationIdWithResponse(ctx context.Context, integrationId string, reqEditors ...RequestEditorFn) (*DeleteApiV1IntegrationIntegrationIdResponse, error) {
	rsp, err := c.DeleteApiV1IntegrationIntegrationId(ctx, integrationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1IntegrationIntegrationIdResponse(rsp)
}

// PatchApiV1IntegrationIntegrationIdWithBodyWithResponse request with arbitrary body returning *PatchApiV1IntegrationIntegrationIdResponse
func (c *ClientWithResponses) PatchApiV1IntegrationIntegrationIdWithBodyWithResponse(ctx context.Context, integrationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1IntegrationIntegrationIdResponse, error) {
	rsp, err := c.PatchApiV1IntegrationIntegrationIdWithBody(ctx, integrationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1IntegrationIntegrationIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV1IntegrationIntegrationIdWithResponse(ctx context.Context, integrationId string, body PatchApiV1IntegrationIntegrationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1IntegrationIntegrationIdResponse, error) {
	rsp, err := c.PatchApiV1IntegrationIntegrationId(ctx, integrationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1IntegrationIntegrationIdResponse(rsp)
}

// PostApiV1InviteOrgSignupWithBodyWithResponse request with arbitrary body returning *PostApiV1InviteOrgSignupResponse
func (c *ClientWithResponses) PostApiV1InviteOrgSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1InviteOrgSignupResponse, error) {
	rsp, err := c.PostApiV1InviteOrgSignupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1InviteOrgSignupResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1InviteOrgSignupWithResponse(ctx context.Context, body PostApiV1InviteOrgSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1InviteOrgSignupResponse, error) {
	rsp, err := c.PostApiV1InviteOrgSignup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1InviteOrgSignupResponse(rsp)
}

// PostApiV1InviteOrgVerifyWithBodyWithResponse request with arbitrary body returning *PostApiV1InviteOrgVerifyResponse
func (c *ClientWithResponses) PostApiV1InviteOrgVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1InviteOrgVerifyResponse, error) {
	rsp, err := c.PostApiV1InviteOrgVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1InviteOrgVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1InviteOrgVerifyWithResponse(ctx context.Context, body PostApiV1InviteOrgVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1InviteOrgVerifyResponse, error) {
	rsp, err := c.PostApiV1InviteOrgVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1InviteOrgVerifyResponse(rsp)
}

// PostApiV1KeyWorkspaceIdWithBodyWithResponse request with arbitrary body returning *PostApiV1KeyWorkspaceIdResponse
func (c *ClientWithResponses) PostApiV1KeyWorkspaceIdWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1KeyWorkspaceIdResponse, error) {
	rsp, err := c.PostApiV1KeyWorkspaceIdWithBody(ctx, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1KeyWorkspaceIdResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1KeyWorkspaceIdWithResponse(ctx context.Context, workspaceId string, body PostApiV1KeyWorkspaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1KeyWorkspaceIdResponse, error) {
	rsp, err := c.PostApiV1KeyWorkspaceId(ctx, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1KeyWorkspaceIdResponse(rsp)
}

// GetApiV1KeyWorkspaceIdLatestWithResponse request returning *GetApiV1KeyWorkspaceIdLatestResponse
func (c *ClientWithResponses) GetApiV1KeyWorkspaceIdLatestWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1KeyWorkspaceIdLatestResponse, error) {
	rsp, err := c.GetApiV1KeyWorkspaceIdLatest(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1KeyWorkspaceIdLatestResponse(rsp)
}

// PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleWithResponse request returning *PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleResponse
func (c *ClientWithResponses) PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleWithResponse(ctx context.Context, membershipOrgId string, reqEditors ...RequestEditorFn) (*PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleResponse, error) {
	rsp, err := c.PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRole(ctx, membershipOrgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleResponse(rsp)
}

// DeleteApiV1MembershipOrgMembershipOrgIdWithResponse request returning *DeleteApiV1MembershipOrgMembershipOrgIdResponse
func (c *ClientWithResponses) DeleteApiV1MembershipOrgMembershipOrgIdWithResponse(ctx context.Context, membershipOrgId string, reqEditors ...RequestEditorFn) (*DeleteApiV1MembershipOrgMembershipOrgIdResponse, error) {
	rsp, err := c.DeleteApiV1MembershipOrgMembershipOrgId(ctx, membershipOrgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1MembershipOrgMembershipOrgIdResponse(rsp)
}

// DeleteApiV1MembershipMembershipIdWithResponse request returning *DeleteApiV1MembershipMembershipIdResponse
func (c *ClientWithResponses) DeleteApiV1MembershipMembershipIdWithResponse(ctx context.Context, membershipId string, reqEditors ...RequestEditorFn) (*DeleteApiV1MembershipMembershipIdResponse, error) {
	rsp, err := c.DeleteApiV1MembershipMembershipId(ctx, membershipId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1MembershipMembershipIdResponse(rsp)
}

// PostApiV1MembershipMembershipIdChangeRoleWithBodyWithResponse request with arbitrary body returning *PostApiV1MembershipMembershipIdChangeRoleResponse
func (c *ClientWithResponses) PostApiV1MembershipMembershipIdChangeRoleWithBodyWithResponse(ctx context.Context, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1MembershipMembershipIdChangeRoleResponse, error) {
	rsp, err := c.PostApiV1MembershipMembershipIdChangeRoleWithBody(ctx, membershipId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1MembershipMembershipIdChangeRoleResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1MembershipMembershipIdChangeRoleWithResponse(ctx context.Context, membershipId string, body PostApiV1MembershipMembershipIdChangeRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1MembershipMembershipIdChangeRoleResponse, error) {
	rsp, err := c.PostApiV1MembershipMembershipIdChangeRole(ctx, membershipId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1MembershipMembershipIdChangeRoleResponse(rsp)
}

// GetApiV1MembershipWorkspaceIdConnectWithResponse request returning *GetApiV1MembershipWorkspaceIdConnectResponse
func (c *ClientWithResponses) GetApiV1MembershipWorkspaceIdConnectWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1MembershipWorkspaceIdConnectResponse, error) {
	rsp, err := c.GetApiV1MembershipWorkspaceIdConnect(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1MembershipWorkspaceIdConnectResponse(rsp)
}

// GetApiV1OrganizationWithResponse request returning *GetApiV1OrganizationResponse
func (c *ClientWithResponses) GetApiV1OrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationResponse, error) {
	rsp, err := c.GetApiV1Organization(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationResponse(rsp)
}

// PostApiV1OrganizationWithBodyWithResponse request with arbitrary body returning *PostApiV1OrganizationResponse
func (c *ClientWithResponses) PostApiV1OrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationResponse, error) {
	rsp, err := c.PostApiV1OrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1OrganizationWithResponse(ctx context.Context, body PostApiV1OrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationResponse, error) {
	rsp, err := c.PostApiV1Organization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationResponse(rsp)
}

// GetApiV1OrganizationOrganizationIdWithResponse request returning *GetApiV1OrganizationOrganizationIdResponse
func (c *ClientWithResponses) GetApiV1OrganizationOrganizationIdWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationOrganizationIdResponse, error) {
	rsp, err := c.GetApiV1OrganizationOrganizationId(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationOrganizationIdResponse(rsp)
}

// PostApiV1OrganizationOrganizationIdCustomerPortalSessionWithResponse request returning *PostApiV1OrganizationOrganizationIdCustomerPortalSessionResponse
func (c *ClientWithResponses) PostApiV1OrganizationOrganizationIdCustomerPortalSessionWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationOrganizationIdCustomerPortalSessionResponse, error) {
	rsp, err := c.PostApiV1OrganizationOrganizationIdCustomerPortalSession(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationOrganizationIdCustomerPortalSessionResponse(rsp)
}

// DeleteApiV1OrganizationOrganizationIdIncidentContactOrgWithBodyWithResponse request with arbitrary body returning *DeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse
func (c *ClientWithResponses) DeleteApiV1OrganizationOrganizationIdIncidentContactOrgWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error) {
	rsp, err := c.DeleteApiV1OrganizationOrganizationIdIncidentContactOrgWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV1OrganizationOrganizationIdIncidentContactOrgWithResponse(ctx context.Context, organizationId string, body DeleteApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error) {
	rsp, err := c.DeleteApiV1OrganizationOrganizationIdIncidentContactOrg(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse(rsp)
}

// GetApiV1OrganizationOrganizationIdIncidentContactOrgWithResponse request returning *GetApiV1OrganizationOrganizationIdIncidentContactOrgResponse
func (c *ClientWithResponses) GetApiV1OrganizationOrganizationIdIncidentContactOrgWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error) {
	rsp, err := c.GetApiV1OrganizationOrganizationIdIncidentContactOrg(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationOrganizationIdIncidentContactOrgResponse(rsp)
}

// PostApiV1OrganizationOrganizationIdIncidentContactOrgWithBodyWithResponse request with arbitrary body returning *PostApiV1OrganizationOrganizationIdIncidentContactOrgResponse
func (c *ClientWithResponses) PostApiV1OrganizationOrganizationIdIncidentContactOrgWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error) {
	rsp, err := c.PostApiV1OrganizationOrganizationIdIncidentContactOrgWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationOrganizationIdIncidentContactOrgResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1OrganizationOrganizationIdIncidentContactOrgWithResponse(ctx context.Context, organizationId string, body PostApiV1OrganizationOrganizationIdIncidentContactOrgJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error) {
	rsp, err := c.PostApiV1OrganizationOrganizationIdIncidentContactOrg(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationOrganizationIdIncidentContactOrgResponse(rsp)
}

// GetApiV1OrganizationOrganizationIdMyWorkspacesWithResponse request returning *GetApiV1OrganizationOrganizationIdMyWorkspacesResponse
func (c *ClientWithResponses) GetApiV1OrganizationOrganizationIdMyWorkspacesWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationOrganizationIdMyWorkspacesResponse, error) {
	rsp, err := c.GetApiV1OrganizationOrganizationIdMyWorkspaces(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationOrganizationIdMyWorkspacesResponse(rsp)
}

// PatchApiV1OrganizationOrganizationIdNameWithBodyWithResponse request with arbitrary body returning *PatchApiV1OrganizationOrganizationIdNameResponse
func (c *ClientWithResponses) PatchApiV1OrganizationOrganizationIdNameWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1OrganizationOrganizationIdNameResponse, error) {
	rsp, err := c.PatchApiV1OrganizationOrganizationIdNameWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1OrganizationOrganizationIdNameResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV1OrganizationOrganizationIdNameWithResponse(ctx context.Context, organizationId string, body PatchApiV1OrganizationOrganizationIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1OrganizationOrganizationIdNameResponse, error) {
	rsp, err := c.PatchApiV1OrganizationOrganizationIdName(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1OrganizationOrganizationIdNameResponse(rsp)
}

// GetApiV1OrganizationOrganizationIdSubscriptionsWithResponse request returning *GetApiV1OrganizationOrganizationIdSubscriptionsResponse
func (c *ClientWithResponses) GetApiV1OrganizationOrganizationIdSubscriptionsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationOrganizationIdSubscriptionsResponse, error) {
	rsp, err := c.GetApiV1OrganizationOrganizationIdSubscriptions(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationOrganizationIdSubscriptionsResponse(rsp)
}

// GetApiV1OrganizationOrganizationIdUsersWithResponse request returning *GetApiV1OrganizationOrganizationIdUsersResponse
func (c *ClientWithResponses) GetApiV1OrganizationOrganizationIdUsersWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationOrganizationIdUsersResponse, error) {
	rsp, err := c.GetApiV1OrganizationOrganizationIdUsers(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationOrganizationIdUsersResponse(rsp)
}

// GetApiV1PasswordBackupPrivateKeyWithResponse request returning *GetApiV1PasswordBackupPrivateKeyResponse
func (c *ClientWithResponses) GetApiV1PasswordBackupPrivateKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1PasswordBackupPrivateKeyResponse, error) {
	rsp, err := c.GetApiV1PasswordBackupPrivateKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PasswordBackupPrivateKeyResponse(rsp)
}

// PostApiV1PasswordBackupPrivateKeyWithBodyWithResponse request with arbitrary body returning *PostApiV1PasswordBackupPrivateKeyResponse
func (c *ClientWithResponses) PostApiV1PasswordBackupPrivateKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordBackupPrivateKeyResponse, error) {
	rsp, err := c.PostApiV1PasswordBackupPrivateKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordBackupPrivateKeyResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PasswordBackupPrivateKeyWithResponse(ctx context.Context, body PostApiV1PasswordBackupPrivateKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordBackupPrivateKeyResponse, error) {
	rsp, err := c.PostApiV1PasswordBackupPrivateKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordBackupPrivateKeyResponse(rsp)
}

// PostApiV1PasswordChangePasswordWithBodyWithResponse request with arbitrary body returning *PostApiV1PasswordChangePasswordResponse
func (c *ClientWithResponses) PostApiV1PasswordChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordChangePasswordResponse, error) {
	rsp, err := c.PostApiV1PasswordChangePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PasswordChangePasswordWithResponse(ctx context.Context, body PostApiV1PasswordChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordChangePasswordResponse, error) {
	rsp, err := c.PostApiV1PasswordChangePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordChangePasswordResponse(rsp)
}

// PostApiV1PasswordEmailPasswordResetWithBodyWithResponse request with arbitrary body returning *PostApiV1PasswordEmailPasswordResetResponse
func (c *ClientWithResponses) PostApiV1PasswordEmailPasswordResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordEmailPasswordResetResponse, error) {
	rsp, err := c.PostApiV1PasswordEmailPasswordResetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordEmailPasswordResetResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PasswordEmailPasswordResetWithResponse(ctx context.Context, body PostApiV1PasswordEmailPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordEmailPasswordResetResponse, error) {
	rsp, err := c.PostApiV1PasswordEmailPasswordReset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordEmailPasswordResetResponse(rsp)
}

// PostApiV1PasswordEmailPasswordResetVerifyWithBodyWithResponse request with arbitrary body returning *PostApiV1PasswordEmailPasswordResetVerifyResponse
func (c *ClientWithResponses) PostApiV1PasswordEmailPasswordResetVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordEmailPasswordResetVerifyResponse, error) {
	rsp, err := c.PostApiV1PasswordEmailPasswordResetVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordEmailPasswordResetVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PasswordEmailPasswordResetVerifyWithResponse(ctx context.Context, body PostApiV1PasswordEmailPasswordResetVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordEmailPasswordResetVerifyResponse, error) {
	rsp, err := c.PostApiV1PasswordEmailPasswordResetVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordEmailPasswordResetVerifyResponse(rsp)
}

// PostApiV1PasswordPasswordResetWithBodyWithResponse request with arbitrary body returning *PostApiV1PasswordPasswordResetResponse
func (c *ClientWithResponses) PostApiV1PasswordPasswordResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordPasswordResetResponse, error) {
	rsp, err := c.PostApiV1PasswordPasswordResetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordPasswordResetResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PasswordPasswordResetWithResponse(ctx context.Context, body PostApiV1PasswordPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordPasswordResetResponse, error) {
	rsp, err := c.PostApiV1PasswordPasswordReset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordPasswordResetResponse(rsp)
}

// PostApiV1PasswordSrp1WithBodyWithResponse request with arbitrary body returning *PostApiV1PasswordSrp1Response
func (c *ClientWithResponses) PostApiV1PasswordSrp1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PasswordSrp1Response, error) {
	rsp, err := c.PostApiV1PasswordSrp1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordSrp1Response(rsp)
}

func (c *ClientWithResponses) PostApiV1PasswordSrp1WithResponse(ctx context.Context, body PostApiV1PasswordSrp1JSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PasswordSrp1Response, error) {
	rsp, err := c.PostApiV1PasswordSrp1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PasswordSrp1Response(rsp)
}

// GetApiV1SecretSnapshotSecretSnapshotIdWithResponse request returning *GetApiV1SecretSnapshotSecretSnapshotIdResponse
func (c *ClientWithResponses) GetApiV1SecretSnapshotSecretSnapshotIdWithResponse(ctx context.Context, secretSnapshotId string, reqEditors ...RequestEditorFn) (*GetApiV1SecretSnapshotSecretSnapshotIdResponse, error) {
	rsp, err := c.GetApiV1SecretSnapshotSecretSnapshotId(ctx, secretSnapshotId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SecretSnapshotSecretSnapshotIdResponse(rsp)
}

// GetApiV1SecretSecretIdSecretVersionsWithResponse request returning *GetApiV1SecretSecretIdSecretVersionsResponse
func (c *ClientWithResponses) GetApiV1SecretSecretIdSecretVersionsWithResponse(ctx context.Context, secretId string, params *GetApiV1SecretSecretIdSecretVersionsParams, reqEditors ...RequestEditorFn) (*GetApiV1SecretSecretIdSecretVersionsResponse, error) {
	rsp, err := c.GetApiV1SecretSecretIdSecretVersions(ctx, secretId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SecretSecretIdSecretVersionsResponse(rsp)
}

// PostApiV1SecretSecretIdSecretVersionsRollbackWithBodyWithResponse request with arbitrary body returning *PostApiV1SecretSecretIdSecretVersionsRollbackResponse
func (c *ClientWithResponses) PostApiV1SecretSecretIdSecretVersionsRollbackWithBodyWithResponse(ctx context.Context, secretId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SecretSecretIdSecretVersionsRollbackResponse, error) {
	rsp, err := c.PostApiV1SecretSecretIdSecretVersionsRollbackWithBody(ctx, secretId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SecretSecretIdSecretVersionsRollbackResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SecretSecretIdSecretVersionsRollbackWithResponse(ctx context.Context, secretId string, body PostApiV1SecretSecretIdSecretVersionsRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SecretSecretIdSecretVersionsRollbackResponse, error) {
	rsp, err := c.PostApiV1SecretSecretIdSecretVersionsRollback(ctx, secretId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SecretSecretIdSecretVersionsRollbackResponse(rsp)
}

// GetApiV1SecretWorkspaceIdWithResponse request returning *GetApiV1SecretWorkspaceIdResponse
func (c *ClientWithResponses) GetApiV1SecretWorkspaceIdWithResponse(ctx context.Context, workspaceId string, params *GetApiV1SecretWorkspaceIdParams, reqEditors ...RequestEditorFn) (*GetApiV1SecretWorkspaceIdResponse, error) {
	rsp, err := c.GetApiV1SecretWorkspaceId(ctx, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SecretWorkspaceIdResponse(rsp)
}

// PostApiV1SecretWorkspaceIdWithBodyWithResponse request with arbitrary body returning *PostApiV1SecretWorkspaceIdResponse
func (c *ClientWithResponses) PostApiV1SecretWorkspaceIdWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SecretWorkspaceIdResponse, error) {
	rsp, err := c.PostApiV1SecretWorkspaceIdWithBody(ctx, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SecretWorkspaceIdResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SecretWorkspaceIdWithResponse(ctx context.Context, workspaceId string, body PostApiV1SecretWorkspaceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SecretWorkspaceIdResponse, error) {
	rsp, err := c.PostApiV1SecretWorkspaceId(ctx, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SecretWorkspaceIdResponse(rsp)
}

// GetApiV1SecretWorkspaceIdServiceTokenWithResponse request returning *GetApiV1SecretWorkspaceIdServiceTokenResponse
func (c *ClientWithResponses) GetApiV1SecretWorkspaceIdServiceTokenWithResponse(ctx context.Context, workspaceId string, params *GetApiV1SecretWorkspaceIdServiceTokenParams, reqEditors ...RequestEditorFn) (*GetApiV1SecretWorkspaceIdServiceTokenResponse, error) {
	rsp, err := c.GetApiV1SecretWorkspaceIdServiceToken(ctx, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SecretWorkspaceIdServiceTokenResponse(rsp)
}

// GetApiV1ServiceTokenWithResponse request returning *GetApiV1ServiceTokenResponse
func (c *ClientWithResponses) GetApiV1ServiceTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ServiceTokenResponse, error) {
	rsp, err := c.GetApiV1ServiceToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ServiceTokenResponse(rsp)
}

// PostApiV1ServiceTokenWithBodyWithResponse request with arbitrary body returning *PostApiV1ServiceTokenResponse
func (c *ClientWithResponses) PostApiV1ServiceTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ServiceTokenResponse, error) {
	rsp, err := c.PostApiV1ServiceTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ServiceTokenResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ServiceTokenWithResponse(ctx context.Context, body PostApiV1ServiceTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ServiceTokenResponse, error) {
	rsp, err := c.PostApiV1ServiceToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ServiceTokenResponse(rsp)
}

// PostApiV1SignupCompleteAccountInviteWithBodyWithResponse request with arbitrary body returning *PostApiV1SignupCompleteAccountInviteResponse
func (c *ClientWithResponses) PostApiV1SignupCompleteAccountInviteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SignupCompleteAccountInviteResponse, error) {
	rsp, err := c.PostApiV1SignupCompleteAccountInviteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SignupCompleteAccountInviteResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SignupCompleteAccountInviteWithResponse(ctx context.Context, body PostApiV1SignupCompleteAccountInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SignupCompleteAccountInviteResponse, error) {
	rsp, err := c.PostApiV1SignupCompleteAccountInvite(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SignupCompleteAccountInviteResponse(rsp)
}

// PostApiV1SignupCompleteAccountSignupWithBodyWithResponse request with arbitrary body returning *PostApiV1SignupCompleteAccountSignupResponse
func (c *ClientWithResponses) PostApiV1SignupCompleteAccountSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SignupCompleteAccountSignupResponse, error) {
	rsp, err := c.PostApiV1SignupCompleteAccountSignupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SignupCompleteAccountSignupResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SignupCompleteAccountSignupWithResponse(ctx context.Context, body PostApiV1SignupCompleteAccountSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SignupCompleteAccountSignupResponse, error) {
	rsp, err := c.PostApiV1SignupCompleteAccountSignup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SignupCompleteAccountSignupResponse(rsp)
}

// PostApiV1SignupEmailSignupWithBodyWithResponse request with arbitrary body returning *PostApiV1SignupEmailSignupResponse
func (c *ClientWithResponses) PostApiV1SignupEmailSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SignupEmailSignupResponse, error) {
	rsp, err := c.PostApiV1SignupEmailSignupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SignupEmailSignupResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SignupEmailSignupWithResponse(ctx context.Context, body PostApiV1SignupEmailSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SignupEmailSignupResponse, error) {
	rsp, err := c.PostApiV1SignupEmailSignup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SignupEmailSignupResponse(rsp)
}

// PostApiV1SignupEmailVerifyWithBodyWithResponse request with arbitrary body returning *PostApiV1SignupEmailVerifyResponse
func (c *ClientWithResponses) PostApiV1SignupEmailVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1SignupEmailVerifyResponse, error) {
	rsp, err := c.PostApiV1SignupEmailVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SignupEmailVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1SignupEmailVerifyWithResponse(ctx context.Context, body PostApiV1SignupEmailVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1SignupEmailVerifyResponse, error) {
	rsp, err := c.PostApiV1SignupEmailVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1SignupEmailVerifyResponse(rsp)
}

// PostApiV1StripeWebhookWithResponse request returning *PostApiV1StripeWebhookResponse
func (c *ClientWithResponses) PostApiV1StripeWebhookWithResponse(ctx context.Context, params *PostApiV1StripeWebhookParams, reqEditors ...RequestEditorFn) (*PostApiV1StripeWebhookResponse, error) {
	rsp, err := c.PostApiV1StripeWebhook(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1StripeWebhookResponse(rsp)
}

// GetApiV1UserActionWithResponse request returning *GetApiV1UserActionResponse
func (c *ClientWithResponses) GetApiV1UserActionWithResponse(ctx context.Context, params *GetApiV1UserActionParams, reqEditors ...RequestEditorFn) (*GetApiV1UserActionResponse, error) {
	rsp, err := c.GetApiV1UserAction(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1UserActionResponse(rsp)
}

// PostApiV1UserActionWithBodyWithResponse request with arbitrary body returning *PostApiV1UserActionResponse
func (c *ClientWithResponses) PostApiV1UserActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1UserActionResponse, error) {
	rsp, err := c.PostApiV1UserActionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1UserActionResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1UserActionWithResponse(ctx context.Context, body PostApiV1UserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1UserActionResponse, error) {
	rsp, err := c.PostApiV1UserAction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1UserActionResponse(rsp)
}

// GetApiV1UserWithResponse request returning *GetApiV1UserResponse
func (c *ClientWithResponses) GetApiV1UserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1UserResponse, error) {
	rsp, err := c.GetApiV1User(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1UserResponse(rsp)
}

// GetApiV1WorkspaceWithResponse request returning *GetApiV1WorkspaceResponse
func (c *ClientWithResponses) GetApiV1WorkspaceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceResponse, error) {
	rsp, err := c.GetApiV1Workspace(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WorkspaceResponse(rsp)
}

// PostApiV1WorkspaceWithBodyWithResponse request with arbitrary body returning *PostApiV1WorkspaceResponse
func (c *ClientWithResponses) PostApiV1WorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceResponse, error) {
	rsp, err := c.PostApiV1WorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1WorkspaceResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1WorkspaceWithResponse(ctx context.Context, body PostApiV1WorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceResponse, error) {
	rsp, err := c.PostApiV1Workspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1WorkspaceResponse(rsp)
}

// DeleteApiV1WorkspaceWorkspaceIdWithResponse request returning *DeleteApiV1WorkspaceWorkspaceIdResponse
func (c *ClientWithResponses) DeleteApiV1WorkspaceWorkspaceIdWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*DeleteApiV1WorkspaceWorkspaceIdResponse, error) {
	rsp, err := c.DeleteApiV1WorkspaceWorkspaceId(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1WorkspaceWorkspaceIdResponse(rsp)
}

// GetApiV1WorkspaceWorkspaceIdWithResponse request returning *GetApiV1WorkspaceWorkspaceIdResponse
func (c *ClientWithResponses) GetApiV1WorkspaceWorkspaceIdWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdResponse, error) {
	rsp, err := c.GetApiV1WorkspaceWorkspaceId(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WorkspaceWorkspaceIdResponse(rsp)
}

// GetApiV1WorkspaceWorkspaceIdAuthorizationsWithResponse request returning *GetApiV1WorkspaceWorkspaceIdAuthorizationsResponse
func (c *ClientWithResponses) GetApiV1WorkspaceWorkspaceIdAuthorizationsWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdAuthorizationsResponse, error) {
	rsp, err := c.GetApiV1WorkspaceWorkspaceIdAuthorizations(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WorkspaceWorkspaceIdAuthorizationsResponse(rsp)
}

// GetApiV1WorkspaceWorkspaceIdIntegrationsWithResponse request returning *GetApiV1WorkspaceWorkspaceIdIntegrationsResponse
func (c *ClientWithResponses) GetApiV1WorkspaceWorkspaceIdIntegrationsWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdIntegrationsResponse, error) {
	rsp, err := c.GetApiV1WorkspaceWorkspaceIdIntegrations(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WorkspaceWorkspaceIdIntegrationsResponse(rsp)
}

// PostApiV1WorkspaceWorkspaceIdInviteSignupWithBodyWithResponse request with arbitrary body returning *PostApiV1WorkspaceWorkspaceIdInviteSignupResponse
func (c *ClientWithResponses) PostApiV1WorkspaceWorkspaceIdInviteSignupWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdInviteSignupResponse, error) {
	rsp, err := c.PostApiV1WorkspaceWorkspaceIdInviteSignupWithBody(ctx, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1WorkspaceWorkspaceIdInviteSignupResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1WorkspaceWorkspaceIdInviteSignupWithResponse(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdInviteSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdInviteSignupResponse, error) {
	rsp, err := c.PostApiV1WorkspaceWorkspaceIdInviteSignup(ctx, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1WorkspaceWorkspaceIdInviteSignupResponse(rsp)
}

// GetApiV1WorkspaceWorkspaceIdKeysWithResponse request returning *GetApiV1WorkspaceWorkspaceIdKeysResponse
func (c *ClientWithResponses) GetApiV1WorkspaceWorkspaceIdKeysWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdKeysResponse, error) {
	rsp, err := c.GetApiV1WorkspaceWorkspaceIdKeys(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WorkspaceWorkspaceIdKeysResponse(rsp)
}

// GetApiV1WorkspaceWorkspaceIdLogsWithResponse request returning *GetApiV1WorkspaceWorkspaceIdLogsResponse
func (c *ClientWithResponses) GetApiV1WorkspaceWorkspaceIdLogsWithResponse(ctx context.Context, workspaceId string, params *GetApiV1WorkspaceWorkspaceIdLogsParams, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdLogsResponse, error) {
	rsp, err := c.GetApiV1WorkspaceWorkspaceIdLogs(ctx, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WorkspaceWorkspaceIdLogsResponse(rsp)
}

// PostApiV1WorkspaceWorkspaceIdNameWithBodyWithResponse request with arbitrary body returning *PostApiV1WorkspaceWorkspaceIdNameResponse
func (c *ClientWithResponses) PostApiV1WorkspaceWorkspaceIdNameWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdNameResponse, error) {
	rsp, err := c.PostApiV1WorkspaceWorkspaceIdNameWithBody(ctx, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1WorkspaceWorkspaceIdNameResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1WorkspaceWorkspaceIdNameWithResponse(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdNameResponse, error) {
	rsp, err := c.PostApiV1WorkspaceWorkspaceIdName(ctx, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1WorkspaceWorkspaceIdNameResponse(rsp)
}

// GetApiV1WorkspaceWorkspaceIdSecretSnapshotsWithResponse request returning *GetApiV1WorkspaceWorkspaceIdSecretSnapshotsResponse
func (c *ClientWithResponses) GetApiV1WorkspaceWorkspaceIdSecretSnapshotsWithResponse(ctx context.Context, workspaceId string, params *GetApiV1WorkspaceWorkspaceIdSecretSnapshotsParams, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdSecretSnapshotsResponse, error) {
	rsp, err := c.GetApiV1WorkspaceWorkspaceIdSecretSnapshots(ctx, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WorkspaceWorkspaceIdSecretSnapshotsResponse(rsp)
}

// GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountWithResponse request returning *GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountResponse
func (c *ClientWithResponses) GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountResponse, error) {
	rsp, err := c.GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCount(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountResponse(rsp)
}

// PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackWithBodyWithResponse request with arbitrary body returning *PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse
func (c *ClientWithResponses) PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse, error) {
	rsp, err := c.PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackWithBody(ctx, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackWithResponse(ctx context.Context, workspaceId string, body PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse, error) {
	rsp, err := c.PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollback(ctx, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse(rsp)
}

// GetApiV1WorkspaceWorkspaceIdServiceTokensWithResponse request returning *GetApiV1WorkspaceWorkspaceIdServiceTokensResponse
func (c *ClientWithResponses) GetApiV1WorkspaceWorkspaceIdServiceTokensWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdServiceTokensResponse, error) {
	rsp, err := c.GetApiV1WorkspaceWorkspaceIdServiceTokens(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WorkspaceWorkspaceIdServiceTokensResponse(rsp)
}

// GetApiV1WorkspaceWorkspaceIdUsersWithResponse request returning *GetApiV1WorkspaceWorkspaceIdUsersResponse
func (c *ClientWithResponses) GetApiV1WorkspaceWorkspaceIdUsersWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV1WorkspaceWorkspaceIdUsersResponse, error) {
	rsp, err := c.GetApiV1WorkspaceWorkspaceIdUsers(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WorkspaceWorkspaceIdUsersResponse(rsp)
}

// GetApiV2ApiKeyWithResponse request returning *GetApiV2ApiKeyResponse
func (c *ClientWithResponses) GetApiV2ApiKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2ApiKeyResponse, error) {
	rsp, err := c.GetApiV2ApiKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ApiKeyResponse(rsp)
}

// PostApiV2ApiKeyWithBodyWithResponse request with arbitrary body returning *PostApiV2ApiKeyResponse
func (c *ClientWithResponses) PostApiV2ApiKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ApiKeyResponse, error) {
	rsp, err := c.PostApiV2ApiKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ApiKeyResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2ApiKeyWithResponse(ctx context.Context, body PostApiV2ApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ApiKeyResponse, error) {
	rsp, err := c.PostApiV2ApiKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ApiKeyResponse(rsp)
}

// DeleteApiV2ApiKeyApiKeyDataIdWithResponse request returning *DeleteApiV2ApiKeyApiKeyDataIdResponse
func (c *ClientWithResponses) DeleteApiV2ApiKeyApiKeyDataIdWithResponse(ctx context.Context, apiKeyDataId string, reqEditors ...RequestEditorFn) (*DeleteApiV2ApiKeyApiKeyDataIdResponse, error) {
	rsp, err := c.DeleteApiV2ApiKeyApiKeyDataId(ctx, apiKeyDataId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2ApiKeyApiKeyDataIdResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdMembershipsWithResponse request returning *GetApiV2OrganizationsOrganizationIdMembershipsResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdMembershipsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdMembershipsResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdMemberships(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdMembershipsResponse(rsp)
}

// DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithResponse request returning *DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse
func (c *ClientWithResponses) DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithResponse(ctx context.Context, organizationId string, membershipId string, reqEditors ...RequestEditorFn) (*DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse, error) {
	rsp, err := c.DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipId(ctx, organizationId, membershipId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse(rsp)
}

// PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithBodyWithResponse request with arbitrary body returning *PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse
func (c *ClientWithResponses) PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithBodyWithResponse(ctx context.Context, organizationId string, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse, error) {
	rsp, err := c.PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithBody(ctx, organizationId, membershipId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithResponse(ctx context.Context, organizationId string, membershipId string, body PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse, error) {
	rsp, err := c.PatchApiV2OrganizationsOrganizationIdMembershipsMembershipId(ctx, organizationId, membershipId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse(rsp)
}

// GetApiV2OrganizationsOrganizationIdWorkspacesWithResponse request returning *GetApiV2OrganizationsOrganizationIdWorkspacesResponse
func (c *ClientWithResponses) GetApiV2OrganizationsOrganizationIdWorkspacesWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetApiV2OrganizationsOrganizationIdWorkspacesResponse, error) {
	rsp, err := c.GetApiV2OrganizationsOrganizationIdWorkspaces(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2OrganizationsOrganizationIdWorkspacesResponse(rsp)
}

// PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentWithBodyWithResponse request with arbitrary body returning *PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse
func (c *ClientWithResponses) PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentWithBodyWithResponse(ctx context.Context, workspaceId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse, error) {
	rsp, err := c.PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentWithBody(ctx, workspaceId, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentWithResponse(ctx context.Context, workspaceId string, environment string, body PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse, error) {
	rsp, err := c.PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironment(ctx, workspaceId, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse(rsp)
}

// PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBodyWithResponse request with arbitrary body returning *PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse
func (c *ClientWithResponses) PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBodyWithResponse(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error) {
	rsp, err := c.PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBody(ctx, workspaceId, environmentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithResponse(ctx context.Context, workspaceId string, environmentName string, body PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error) {
	rsp, err := c.PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentName(ctx, workspaceId, environmentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse(rsp)
}

// DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBodyWithResponse request with arbitrary body returning *DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse
func (c *ClientWithResponses) DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBodyWithResponse(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error) {
	rsp, err := c.DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBody(ctx, workspaceId, environmentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithResponse(ctx context.Context, workspaceId string, environmentName string, body DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error) {
	rsp, err := c.DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentName(ctx, workspaceId, environmentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse(rsp)
}

// GetApiV2SecretWorkspaceWorkspaceIdWithResponse request returning *GetApiV2SecretWorkspaceWorkspaceIdResponse
func (c *ClientWithResponses) GetApiV2SecretWorkspaceWorkspaceIdWithResponse(ctx context.Context, workspaceId string, params *GetApiV2SecretWorkspaceWorkspaceIdParams, reqEditors ...RequestEditorFn) (*GetApiV2SecretWorkspaceWorkspaceIdResponse, error) {
	rsp, err := c.GetApiV2SecretWorkspaceWorkspaceId(ctx, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2SecretWorkspaceWorkspaceIdResponse(rsp)
}

// PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBodyWithResponse request with arbitrary body returning *PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse
func (c *ClientWithResponses) PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBodyWithResponse(ctx context.Context, workspaceId string, environmentName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error) {
	rsp, err := c.PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithBody(ctx, workspaceId, environmentName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithResponse(ctx context.Context, workspaceId string, environmentName string, body PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error) {
	rsp, err := c.PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentName(ctx, workspaceId, environmentName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse(rsp)
}

// PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentWithBodyWithResponse request with arbitrary body returning *PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse
func (c *ClientWithResponses) PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentWithBodyWithResponse(ctx context.Context, workspaceId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse, error) {
	rsp, err := c.PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentWithBody(ctx, workspaceId, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentWithResponse(ctx context.Context, workspaceId string, environment string, body PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse, error) {
	rsp, err := c.PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironment(ctx, workspaceId, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse(rsp)
}

// DeleteApiV2SecretSecretIdWithResponse request returning *DeleteApiV2SecretSecretIdResponse
func (c *ClientWithResponses) DeleteApiV2SecretSecretIdWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*DeleteApiV2SecretSecretIdResponse, error) {
	rsp, err := c.DeleteApiV2SecretSecretId(ctx, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2SecretSecretIdResponse(rsp)
}

// GetApiV2SecretSecretIdWithResponse request returning *GetApiV2SecretSecretIdResponse
func (c *ClientWithResponses) GetApiV2SecretSecretIdWithResponse(ctx context.Context, secretId string, reqEditors ...RequestEditorFn) (*GetApiV2SecretSecretIdResponse, error) {
	rsp, err := c.GetApiV2SecretSecretId(ctx, secretId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2SecretSecretIdResponse(rsp)
}

// DeleteApiV2SecretsWithBodyWithResponse request with arbitrary body returning *DeleteApiV2SecretsResponse
func (c *ClientWithResponses) DeleteApiV2SecretsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV2SecretsResponse, error) {
	rsp, err := c.DeleteApiV2SecretsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2SecretsResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV2SecretsWithResponse(ctx context.Context, body DeleteApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV2SecretsResponse, error) {
	rsp, err := c.DeleteApiV2Secrets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2SecretsResponse(rsp)
}

// GetApiV2SecretsWithResponse request returning *GetApiV2SecretsResponse
func (c *ClientWithResponses) GetApiV2SecretsWithResponse(ctx context.Context, params *GetApiV2SecretsParams, reqEditors ...RequestEditorFn) (*GetApiV2SecretsResponse, error) {
	rsp, err := c.GetApiV2Secrets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2SecretsResponse(rsp)
}

// PatchApiV2SecretsWithBodyWithResponse request with arbitrary body returning *PatchApiV2SecretsResponse
func (c *ClientWithResponses) PatchApiV2SecretsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2SecretsResponse, error) {
	rsp, err := c.PatchApiV2SecretsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2SecretsResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2SecretsWithResponse(ctx context.Context, body PatchApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2SecretsResponse, error) {
	rsp, err := c.PatchApiV2Secrets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2SecretsResponse(rsp)
}

// PostApiV2SecretsWithBodyWithResponse request with arbitrary body returning *PostApiV2SecretsResponse
func (c *ClientWithResponses) PostApiV2SecretsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2SecretsResponse, error) {
	rsp, err := c.PostApiV2SecretsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2SecretsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2SecretsWithResponse(ctx context.Context, body PostApiV2SecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2SecretsResponse, error) {
	rsp, err := c.PostApiV2Secrets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2SecretsResponse(rsp)
}

// GetApiV2ServiceTokenWithResponse request returning *GetApiV2ServiceTokenResponse
func (c *ClientWithResponses) GetApiV2ServiceTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2ServiceTokenResponse, error) {
	rsp, err := c.GetApiV2ServiceToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2ServiceTokenResponse(rsp)
}

// PostApiV2ServiceTokenWithBodyWithResponse request with arbitrary body returning *PostApiV2ServiceTokenResponse
func (c *ClientWithResponses) PostApiV2ServiceTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2ServiceTokenResponse, error) {
	rsp, err := c.PostApiV2ServiceTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ServiceTokenResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2ServiceTokenWithResponse(ctx context.Context, body PostApiV2ServiceTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2ServiceTokenResponse, error) {
	rsp, err := c.PostApiV2ServiceToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2ServiceTokenResponse(rsp)
}

// DeleteApiV2ServiceTokenServiceTokenDataIdWithResponse request returning *DeleteApiV2ServiceTokenServiceTokenDataIdResponse
func (c *ClientWithResponses) DeleteApiV2ServiceTokenServiceTokenDataIdWithResponse(ctx context.Context, serviceTokenDataId string, reqEditors ...RequestEditorFn) (*DeleteApiV2ServiceTokenServiceTokenDataIdResponse, error) {
	rsp, err := c.DeleteApiV2ServiceTokenServiceTokenDataId(ctx, serviceTokenDataId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2ServiceTokenServiceTokenDataIdResponse(rsp)
}

// GetApiV2UsersMeWithResponse request returning *GetApiV2UsersMeResponse
func (c *ClientWithResponses) GetApiV2UsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2UsersMeResponse, error) {
	rsp, err := c.GetApiV2UsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2UsersMeResponse(rsp)
}

// GetApiV2UsersMeOrganizationsWithResponse request returning *GetApiV2UsersMeOrganizationsResponse
func (c *ClientWithResponses) GetApiV2UsersMeOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV2UsersMeOrganizationsResponse, error) {
	rsp, err := c.GetApiV2UsersMeOrganizations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2UsersMeOrganizationsResponse(rsp)
}

// GetApiV2WorkspaceWorkspaceIdEncryptedKeyWithResponse request returning *GetApiV2WorkspaceWorkspaceIdEncryptedKeyResponse
func (c *ClientWithResponses) GetApiV2WorkspaceWorkspaceIdEncryptedKeyWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV2WorkspaceWorkspaceIdEncryptedKeyResponse, error) {
	rsp, err := c.GetApiV2WorkspaceWorkspaceIdEncryptedKey(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2WorkspaceWorkspaceIdEncryptedKeyResponse(rsp)
}

// DeleteApiV2WorkspaceWorkspaceIdEnvironmentsWithBodyWithResponse request with arbitrary body returning *DeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse
func (c *ClientWithResponses) DeleteApiV2WorkspaceWorkspaceIdEnvironmentsWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error) {
	rsp, err := c.DeleteApiV2WorkspaceWorkspaceIdEnvironmentsWithBody(ctx, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiV2WorkspaceWorkspaceIdEnvironmentsWithResponse(ctx context.Context, workspaceId string, body DeleteApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error) {
	rsp, err := c.DeleteApiV2WorkspaceWorkspaceIdEnvironments(ctx, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse(rsp)
}

// PostApiV2WorkspaceWorkspaceIdEnvironmentsWithBodyWithResponse request with arbitrary body returning *PostApiV2WorkspaceWorkspaceIdEnvironmentsResponse
func (c *ClientWithResponses) PostApiV2WorkspaceWorkspaceIdEnvironmentsWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error) {
	rsp, err := c.PostApiV2WorkspaceWorkspaceIdEnvironmentsWithBody(ctx, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2WorkspaceWorkspaceIdEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2WorkspaceWorkspaceIdEnvironmentsWithResponse(ctx context.Context, workspaceId string, body PostApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error) {
	rsp, err := c.PostApiV2WorkspaceWorkspaceIdEnvironments(ctx, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2WorkspaceWorkspaceIdEnvironmentsResponse(rsp)
}

// PutApiV2WorkspaceWorkspaceIdEnvironmentsWithBodyWithResponse request with arbitrary body returning *PutApiV2WorkspaceWorkspaceIdEnvironmentsResponse
func (c *ClientWithResponses) PutApiV2WorkspaceWorkspaceIdEnvironmentsWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error) {
	rsp, err := c.PutApiV2WorkspaceWorkspaceIdEnvironmentsWithBody(ctx, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2WorkspaceWorkspaceIdEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) PutApiV2WorkspaceWorkspaceIdEnvironmentsWithResponse(ctx context.Context, workspaceId string, body PutApiV2WorkspaceWorkspaceIdEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error) {
	rsp, err := c.PutApiV2WorkspaceWorkspaceIdEnvironments(ctx, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV2WorkspaceWorkspaceIdEnvironmentsResponse(rsp)
}

// GetApiV2WorkspaceWorkspaceIdMembershipsWithResponse request returning *GetApiV2WorkspaceWorkspaceIdMembershipsResponse
func (c *ClientWithResponses) GetApiV2WorkspaceWorkspaceIdMembershipsWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV2WorkspaceWorkspaceIdMembershipsResponse, error) {
	rsp, err := c.GetApiV2WorkspaceWorkspaceIdMemberships(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2WorkspaceWorkspaceIdMembershipsResponse(rsp)
}

// DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithResponse request returning *DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse
func (c *ClientWithResponses) DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithResponse(ctx context.Context, workspaceId string, membershipId string, reqEditors ...RequestEditorFn) (*DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse, error) {
	rsp, err := c.DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipId(ctx, workspaceId, membershipId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse(rsp)
}

// PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithBodyWithResponse request with arbitrary body returning *PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse
func (c *ClientWithResponses) PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithBodyWithResponse(ctx context.Context, workspaceId string, membershipId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse, error) {
	rsp, err := c.PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithBody(ctx, workspaceId, membershipId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithResponse(ctx context.Context, workspaceId string, membershipId string, body PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse, error) {
	rsp, err := c.PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipId(ctx, workspaceId, membershipId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse(rsp)
}

// GetApiV2WorkspaceWorkspaceIdSecretsWithResponse request returning *GetApiV2WorkspaceWorkspaceIdSecretsResponse
func (c *ClientWithResponses) GetApiV2WorkspaceWorkspaceIdSecretsWithResponse(ctx context.Context, workspaceId string, params *GetApiV2WorkspaceWorkspaceIdSecretsParams, reqEditors ...RequestEditorFn) (*GetApiV2WorkspaceWorkspaceIdSecretsResponse, error) {
	rsp, err := c.GetApiV2WorkspaceWorkspaceIdSecrets(ctx, workspaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2WorkspaceWorkspaceIdSecretsResponse(rsp)
}

// PostApiV2WorkspaceWorkspaceIdSecretsWithBodyWithResponse request with arbitrary body returning *PostApiV2WorkspaceWorkspaceIdSecretsResponse
func (c *ClientWithResponses) PostApiV2WorkspaceWorkspaceIdSecretsWithBodyWithResponse(ctx context.Context, workspaceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV2WorkspaceWorkspaceIdSecretsResponse, error) {
	rsp, err := c.PostApiV2WorkspaceWorkspaceIdSecretsWithBody(ctx, workspaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2WorkspaceWorkspaceIdSecretsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV2WorkspaceWorkspaceIdSecretsWithResponse(ctx context.Context, workspaceId string, body PostApiV2WorkspaceWorkspaceIdSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV2WorkspaceWorkspaceIdSecretsResponse, error) {
	rsp, err := c.PostApiV2WorkspaceWorkspaceIdSecrets(ctx, workspaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV2WorkspaceWorkspaceIdSecretsResponse(rsp)
}

// GetApiV2WorkspaceWorkspaceIdServiceTokenDataWithResponse request returning *GetApiV2WorkspaceWorkspaceIdServiceTokenDataResponse
func (c *ClientWithResponses) GetApiV2WorkspaceWorkspaceIdServiceTokenDataWithResponse(ctx context.Context, workspaceId string, reqEditors ...RequestEditorFn) (*GetApiV2WorkspaceWorkspaceIdServiceTokenDataResponse, error) {
	rsp, err := c.GetApiV2WorkspaceWorkspaceIdServiceTokenData(ctx, workspaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV2WorkspaceWorkspaceIdServiceTokenDataResponse(rsp)
}

// ParseGetApiStatusResponse parses an HTTP response from a GetApiStatusWithResponse call
func ParseGetApiStatusResponse(rsp *http.Response) (*GetApiStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1ActionActionIdResponse parses an HTTP response from a GetApiV1ActionActionIdWithResponse call
func ParseGetApiV1ActionActionIdResponse(rsp *http.Response) (*GetApiV1ActionActionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ActionActionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1AuthCheckAuthResponse parses an HTTP response from a PostApiV1AuthCheckAuthWithResponse call
func ParsePostApiV1AuthCheckAuthResponse(rsp *http.Response) (*PostApiV1AuthCheckAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AuthCheckAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1AuthLogin1Response parses an HTTP response from a PostApiV1AuthLogin1WithResponse call
func ParsePostApiV1AuthLogin1Response(rsp *http.Response) (*PostApiV1AuthLogin1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AuthLogin1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1AuthLogin2Response parses an HTTP response from a PostApiV1AuthLogin2WithResponse call
func ParsePostApiV1AuthLogin2Response(rsp *http.Response) (*PostApiV1AuthLogin2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AuthLogin2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1AuthLogoutResponse parses an HTTP response from a PostApiV1AuthLogoutWithResponse call
func ParsePostApiV1AuthLogoutResponse(rsp *http.Response) (*PostApiV1AuthLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AuthLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1AuthTokenResponse parses an HTTP response from a PostApiV1AuthTokenWithResponse call
func ParsePostApiV1AuthTokenResponse(rsp *http.Response) (*PostApiV1AuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchApiV1BotBotIdActiveResponse parses an HTTP response from a PatchApiV1BotBotIdActiveWithResponse call
func ParsePatchApiV1BotBotIdActiveResponse(rsp *http.Response) (*PatchApiV1BotBotIdActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV1BotBotIdActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1BotWorkspaceIdResponse parses an HTTP response from a GetApiV1BotWorkspaceIdWithResponse call
func ParseGetApiV1BotWorkspaceIdResponse(rsp *http.Response) (*GetApiV1BotWorkspaceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1BotWorkspaceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1IntegrationAuthIntegrationOptionsResponse parses an HTTP response from a GetApiV1IntegrationAuthIntegrationOptionsWithResponse call
func ParseGetApiV1IntegrationAuthIntegrationOptionsResponse(rsp *http.Response) (*GetApiV1IntegrationAuthIntegrationOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IntegrationAuthIntegrationOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1IntegrationAuthOauthTokenResponse parses an HTTP response from a PostApiV1IntegrationAuthOauthTokenWithResponse call
func ParsePostApiV1IntegrationAuthOauthTokenResponse(rsp *http.Response) (*PostApiV1IntegrationAuthOauthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1IntegrationAuthOauthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1IntegrationAuthIntegrationAuthIdResponse parses an HTTP response from a DeleteApiV1IntegrationAuthIntegrationAuthIdWithResponse call
func ParseDeleteApiV1IntegrationAuthIntegrationAuthIdResponse(rsp *http.Response) (*DeleteApiV1IntegrationAuthIntegrationAuthIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1IntegrationAuthIntegrationAuthIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1IntegrationAuthIntegrationAuthIdAppsResponse parses an HTTP response from a GetApiV1IntegrationAuthIntegrationAuthIdAppsWithResponse call
func ParseGetApiV1IntegrationAuthIntegrationAuthIdAppsResponse(rsp *http.Response) (*GetApiV1IntegrationAuthIntegrationAuthIdAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1IntegrationAuthIntegrationAuthIdAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1IntegrationIntegrationIdResponse parses an HTTP response from a DeleteApiV1IntegrationIntegrationIdWithResponse call
func ParseDeleteApiV1IntegrationIntegrationIdResponse(rsp *http.Response) (*DeleteApiV1IntegrationIntegrationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1IntegrationIntegrationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchApiV1IntegrationIntegrationIdResponse parses an HTTP response from a PatchApiV1IntegrationIntegrationIdWithResponse call
func ParsePatchApiV1IntegrationIntegrationIdResponse(rsp *http.Response) (*PatchApiV1IntegrationIntegrationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV1IntegrationIntegrationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1InviteOrgSignupResponse parses an HTTP response from a PostApiV1InviteOrgSignupWithResponse call
func ParsePostApiV1InviteOrgSignupResponse(rsp *http.Response) (*PostApiV1InviteOrgSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1InviteOrgSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1InviteOrgVerifyResponse parses an HTTP response from a PostApiV1InviteOrgVerifyWithResponse call
func ParsePostApiV1InviteOrgVerifyResponse(rsp *http.Response) (*PostApiV1InviteOrgVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1InviteOrgVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1KeyWorkspaceIdResponse parses an HTTP response from a PostApiV1KeyWorkspaceIdWithResponse call
func ParsePostApiV1KeyWorkspaceIdResponse(rsp *http.Response) (*PostApiV1KeyWorkspaceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1KeyWorkspaceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1KeyWorkspaceIdLatestResponse parses an HTTP response from a GetApiV1KeyWorkspaceIdLatestWithResponse call
func ParseGetApiV1KeyWorkspaceIdLatestResponse(rsp *http.Response) (*GetApiV1KeyWorkspaceIdLatestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1KeyWorkspaceIdLatestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleResponse parses an HTTP response from a PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleWithResponse call
func ParsePostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleResponse(rsp *http.Response) (*PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1MembershipOrgMembershipOrgMembershipOrgIdChangeRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1MembershipOrgMembershipOrgIdResponse parses an HTTP response from a DeleteApiV1MembershipOrgMembershipOrgIdWithResponse call
func ParseDeleteApiV1MembershipOrgMembershipOrgIdResponse(rsp *http.Response) (*DeleteApiV1MembershipOrgMembershipOrgIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1MembershipOrgMembershipOrgIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1MembershipMembershipIdResponse parses an HTTP response from a DeleteApiV1MembershipMembershipIdWithResponse call
func ParseDeleteApiV1MembershipMembershipIdResponse(rsp *http.Response) (*DeleteApiV1MembershipMembershipIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1MembershipMembershipIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1MembershipMembershipIdChangeRoleResponse parses an HTTP response from a PostApiV1MembershipMembershipIdChangeRoleWithResponse call
func ParsePostApiV1MembershipMembershipIdChangeRoleResponse(rsp *http.Response) (*PostApiV1MembershipMembershipIdChangeRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1MembershipMembershipIdChangeRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1MembershipWorkspaceIdConnectResponse parses an HTTP response from a GetApiV1MembershipWorkspaceIdConnectWithResponse call
func ParseGetApiV1MembershipWorkspaceIdConnectResponse(rsp *http.Response) (*GetApiV1MembershipWorkspaceIdConnectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1MembershipWorkspaceIdConnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1OrganizationResponse parses an HTTP response from a GetApiV1OrganizationWithResponse call
func ParseGetApiV1OrganizationResponse(rsp *http.Response) (*GetApiV1OrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1OrganizationResponse parses an HTTP response from a PostApiV1OrganizationWithResponse call
func ParsePostApiV1OrganizationResponse(rsp *http.Response) (*PostApiV1OrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1OrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1OrganizationOrganizationIdResponse parses an HTTP response from a GetApiV1OrganizationOrganizationIdWithResponse call
func ParseGetApiV1OrganizationOrganizationIdResponse(rsp *http.Response) (*GetApiV1OrganizationOrganizationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationOrganizationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1OrganizationOrganizationIdCustomerPortalSessionResponse parses an HTTP response from a PostApiV1OrganizationOrganizationIdCustomerPortalSessionWithResponse call
func ParsePostApiV1OrganizationOrganizationIdCustomerPortalSessionResponse(rsp *http.Response) (*PostApiV1OrganizationOrganizationIdCustomerPortalSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1OrganizationOrganizationIdCustomerPortalSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse parses an HTTP response from a DeleteApiV1OrganizationOrganizationIdIncidentContactOrgWithResponse call
func ParseDeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse(rsp *http.Response) (*DeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1OrganizationOrganizationIdIncidentContactOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1OrganizationOrganizationIdIncidentContactOrgResponse parses an HTTP response from a GetApiV1OrganizationOrganizationIdIncidentContactOrgWithResponse call
func ParseGetApiV1OrganizationOrganizationIdIncidentContactOrgResponse(rsp *http.Response) (*GetApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationOrganizationIdIncidentContactOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1OrganizationOrganizationIdIncidentContactOrgResponse parses an HTTP response from a PostApiV1OrganizationOrganizationIdIncidentContactOrgWithResponse call
func ParsePostApiV1OrganizationOrganizationIdIncidentContactOrgResponse(rsp *http.Response) (*PostApiV1OrganizationOrganizationIdIncidentContactOrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1OrganizationOrganizationIdIncidentContactOrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1OrganizationOrganizationIdMyWorkspacesResponse parses an HTTP response from a GetApiV1OrganizationOrganizationIdMyWorkspacesWithResponse call
func ParseGetApiV1OrganizationOrganizationIdMyWorkspacesResponse(rsp *http.Response) (*GetApiV1OrganizationOrganizationIdMyWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationOrganizationIdMyWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchApiV1OrganizationOrganizationIdNameResponse parses an HTTP response from a PatchApiV1OrganizationOrganizationIdNameWithResponse call
func ParsePatchApiV1OrganizationOrganizationIdNameResponse(rsp *http.Response) (*PatchApiV1OrganizationOrganizationIdNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV1OrganizationOrganizationIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1OrganizationOrganizationIdSubscriptionsResponse parses an HTTP response from a GetApiV1OrganizationOrganizationIdSubscriptionsWithResponse call
func ParseGetApiV1OrganizationOrganizationIdSubscriptionsResponse(rsp *http.Response) (*GetApiV1OrganizationOrganizationIdSubscriptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationOrganizationIdSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1OrganizationOrganizationIdUsersResponse parses an HTTP response from a GetApiV1OrganizationOrganizationIdUsersWithResponse call
func ParseGetApiV1OrganizationOrganizationIdUsersResponse(rsp *http.Response) (*GetApiV1OrganizationOrganizationIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationOrganizationIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1PasswordBackupPrivateKeyResponse parses an HTTP response from a GetApiV1PasswordBackupPrivateKeyWithResponse call
func ParseGetApiV1PasswordBackupPrivateKeyResponse(rsp *http.Response) (*GetApiV1PasswordBackupPrivateKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PasswordBackupPrivateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1PasswordBackupPrivateKeyResponse parses an HTTP response from a PostApiV1PasswordBackupPrivateKeyWithResponse call
func ParsePostApiV1PasswordBackupPrivateKeyResponse(rsp *http.Response) (*PostApiV1PasswordBackupPrivateKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PasswordBackupPrivateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1PasswordChangePasswordResponse parses an HTTP response from a PostApiV1PasswordChangePasswordWithResponse call
func ParsePostApiV1PasswordChangePasswordResponse(rsp *http.Response) (*PostApiV1PasswordChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PasswordChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1PasswordEmailPasswordResetResponse parses an HTTP response from a PostApiV1PasswordEmailPasswordResetWithResponse call
func ParsePostApiV1PasswordEmailPasswordResetResponse(rsp *http.Response) (*PostApiV1PasswordEmailPasswordResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PasswordEmailPasswordResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1PasswordEmailPasswordResetVerifyResponse parses an HTTP response from a PostApiV1PasswordEmailPasswordResetVerifyWithResponse call
func ParsePostApiV1PasswordEmailPasswordResetVerifyResponse(rsp *http.Response) (*PostApiV1PasswordEmailPasswordResetVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PasswordEmailPasswordResetVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1PasswordPasswordResetResponse parses an HTTP response from a PostApiV1PasswordPasswordResetWithResponse call
func ParsePostApiV1PasswordPasswordResetResponse(rsp *http.Response) (*PostApiV1PasswordPasswordResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PasswordPasswordResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1PasswordSrp1Response parses an HTTP response from a PostApiV1PasswordSrp1WithResponse call
func ParsePostApiV1PasswordSrp1Response(rsp *http.Response) (*PostApiV1PasswordSrp1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PasswordSrp1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1SecretSnapshotSecretSnapshotIdResponse parses an HTTP response from a GetApiV1SecretSnapshotSecretSnapshotIdWithResponse call
func ParseGetApiV1SecretSnapshotSecretSnapshotIdResponse(rsp *http.Response) (*GetApiV1SecretSnapshotSecretSnapshotIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SecretSnapshotSecretSnapshotIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1SecretSecretIdSecretVersionsResponse parses an HTTP response from a GetApiV1SecretSecretIdSecretVersionsWithResponse call
func ParseGetApiV1SecretSecretIdSecretVersionsResponse(rsp *http.Response) (*GetApiV1SecretSecretIdSecretVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SecretSecretIdSecretVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// SecretVersions Secret versions
			SecretVersions *[]SecretVersion `json:"secretVersions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1SecretSecretIdSecretVersionsRollbackResponse parses an HTTP response from a PostApiV1SecretSecretIdSecretVersionsRollbackWithResponse call
func ParsePostApiV1SecretSecretIdSecretVersionsRollbackResponse(rsp *http.Response) (*PostApiV1SecretSecretIdSecretVersionsRollbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SecretSecretIdSecretVersionsRollbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Secret *Secret `json:"secret,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1SecretWorkspaceIdResponse parses an HTTP response from a GetApiV1SecretWorkspaceIdWithResponse call
func ParseGetApiV1SecretWorkspaceIdResponse(rsp *http.Response) (*GetApiV1SecretWorkspaceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SecretWorkspaceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1SecretWorkspaceIdResponse parses an HTTP response from a PostApiV1SecretWorkspaceIdWithResponse call
func ParsePostApiV1SecretWorkspaceIdResponse(rsp *http.Response) (*PostApiV1SecretWorkspaceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SecretWorkspaceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1SecretWorkspaceIdServiceTokenResponse parses an HTTP response from a GetApiV1SecretWorkspaceIdServiceTokenWithResponse call
func ParseGetApiV1SecretWorkspaceIdServiceTokenResponse(rsp *http.Response) (*GetApiV1SecretWorkspaceIdServiceTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SecretWorkspaceIdServiceTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1ServiceTokenResponse parses an HTTP response from a GetApiV1ServiceTokenWithResponse call
func ParseGetApiV1ServiceTokenResponse(rsp *http.Response) (*GetApiV1ServiceTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ServiceTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1ServiceTokenResponse parses an HTTP response from a PostApiV1ServiceTokenWithResponse call
func ParsePostApiV1ServiceTokenResponse(rsp *http.Response) (*PostApiV1ServiceTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ServiceTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1SignupCompleteAccountInviteResponse parses an HTTP response from a PostApiV1SignupCompleteAccountInviteWithResponse call
func ParsePostApiV1SignupCompleteAccountInviteResponse(rsp *http.Response) (*PostApiV1SignupCompleteAccountInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SignupCompleteAccountInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1SignupCompleteAccountSignupResponse parses an HTTP response from a PostApiV1SignupCompleteAccountSignupWithResponse call
func ParsePostApiV1SignupCompleteAccountSignupResponse(rsp *http.Response) (*PostApiV1SignupCompleteAccountSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SignupCompleteAccountSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1SignupEmailSignupResponse parses an HTTP response from a PostApiV1SignupEmailSignupWithResponse call
func ParsePostApiV1SignupEmailSignupResponse(rsp *http.Response) (*PostApiV1SignupEmailSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SignupEmailSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1SignupEmailVerifyResponse parses an HTTP response from a PostApiV1SignupEmailVerifyWithResponse call
func ParsePostApiV1SignupEmailVerifyResponse(rsp *http.Response) (*PostApiV1SignupEmailVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1SignupEmailVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1StripeWebhookResponse parses an HTTP response from a PostApiV1StripeWebhookWithResponse call
func ParsePostApiV1StripeWebhookResponse(rsp *http.Response) (*PostApiV1StripeWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1StripeWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1UserActionResponse parses an HTTP response from a GetApiV1UserActionWithResponse call
func ParseGetApiV1UserActionResponse(rsp *http.Response) (*GetApiV1UserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1UserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1UserActionResponse parses an HTTP response from a PostApiV1UserActionWithResponse call
func ParsePostApiV1UserActionResponse(rsp *http.Response) (*PostApiV1UserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1UserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1UserResponse parses an HTTP response from a GetApiV1UserWithResponse call
func ParseGetApiV1UserResponse(rsp *http.Response) (*GetApiV1UserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1UserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1WorkspaceResponse parses an HTTP response from a GetApiV1WorkspaceWithResponse call
func ParseGetApiV1WorkspaceResponse(rsp *http.Response) (*GetApiV1WorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1WorkspaceResponse parses an HTTP response from a PostApiV1WorkspaceWithResponse call
func ParsePostApiV1WorkspaceResponse(rsp *http.Response) (*PostApiV1WorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1WorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV1WorkspaceWorkspaceIdResponse parses an HTTP response from a DeleteApiV1WorkspaceWorkspaceIdWithResponse call
func ParseDeleteApiV1WorkspaceWorkspaceIdResponse(rsp *http.Response) (*DeleteApiV1WorkspaceWorkspaceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1WorkspaceWorkspaceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1WorkspaceWorkspaceIdResponse parses an HTTP response from a GetApiV1WorkspaceWorkspaceIdWithResponse call
func ParseGetApiV1WorkspaceWorkspaceIdResponse(rsp *http.Response) (*GetApiV1WorkspaceWorkspaceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WorkspaceWorkspaceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1WorkspaceWorkspaceIdAuthorizationsResponse parses an HTTP response from a GetApiV1WorkspaceWorkspaceIdAuthorizationsWithResponse call
func ParseGetApiV1WorkspaceWorkspaceIdAuthorizationsResponse(rsp *http.Response) (*GetApiV1WorkspaceWorkspaceIdAuthorizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WorkspaceWorkspaceIdAuthorizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1WorkspaceWorkspaceIdIntegrationsResponse parses an HTTP response from a GetApiV1WorkspaceWorkspaceIdIntegrationsWithResponse call
func ParseGetApiV1WorkspaceWorkspaceIdIntegrationsResponse(rsp *http.Response) (*GetApiV1WorkspaceWorkspaceIdIntegrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WorkspaceWorkspaceIdIntegrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1WorkspaceWorkspaceIdInviteSignupResponse parses an HTTP response from a PostApiV1WorkspaceWorkspaceIdInviteSignupWithResponse call
func ParsePostApiV1WorkspaceWorkspaceIdInviteSignupResponse(rsp *http.Response) (*PostApiV1WorkspaceWorkspaceIdInviteSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1WorkspaceWorkspaceIdInviteSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1WorkspaceWorkspaceIdKeysResponse parses an HTTP response from a GetApiV1WorkspaceWorkspaceIdKeysWithResponse call
func ParseGetApiV1WorkspaceWorkspaceIdKeysResponse(rsp *http.Response) (*GetApiV1WorkspaceWorkspaceIdKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WorkspaceWorkspaceIdKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1WorkspaceWorkspaceIdLogsResponse parses an HTTP response from a GetApiV1WorkspaceWorkspaceIdLogsWithResponse call
func ParseGetApiV1WorkspaceWorkspaceIdLogsResponse(rsp *http.Response) (*GetApiV1WorkspaceWorkspaceIdLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WorkspaceWorkspaceIdLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Logs Project logs
			Logs *[]Log `json:"logs,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1WorkspaceWorkspaceIdNameResponse parses an HTTP response from a PostApiV1WorkspaceWorkspaceIdNameWithResponse call
func ParsePostApiV1WorkspaceWorkspaceIdNameResponse(rsp *http.Response) (*PostApiV1WorkspaceWorkspaceIdNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1WorkspaceWorkspaceIdNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1WorkspaceWorkspaceIdSecretSnapshotsResponse parses an HTTP response from a GetApiV1WorkspaceWorkspaceIdSecretSnapshotsWithResponse call
func ParseGetApiV1WorkspaceWorkspaceIdSecretSnapshotsResponse(rsp *http.Response) (*GetApiV1WorkspaceWorkspaceIdSecretSnapshotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WorkspaceWorkspaceIdSecretSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// SecretSnapshots Project secret snapshots
			SecretSnapshots *[]SecretSnapshot `json:"secretSnapshots,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountResponse parses an HTTP response from a GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountWithResponse call
func ParseGetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountResponse(rsp *http.Response) (*GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WorkspaceWorkspaceIdSecretSnapshotsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse parses an HTTP response from a PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackWithResponse call
func ParsePostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse(rsp *http.Response) (*PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1WorkspaceWorkspaceIdSecretSnapshotsRollbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Secrets Secrets rolled back to
			Secrets *[]Secret `json:"secrets,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1WorkspaceWorkspaceIdServiceTokensResponse parses an HTTP response from a GetApiV1WorkspaceWorkspaceIdServiceTokensWithResponse call
func ParseGetApiV1WorkspaceWorkspaceIdServiceTokensResponse(rsp *http.Response) (*GetApiV1WorkspaceWorkspaceIdServiceTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WorkspaceWorkspaceIdServiceTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1WorkspaceWorkspaceIdUsersResponse parses an HTTP response from a GetApiV1WorkspaceWorkspaceIdUsersWithResponse call
func ParseGetApiV1WorkspaceWorkspaceIdUsersResponse(rsp *http.Response) (*GetApiV1WorkspaceWorkspaceIdUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WorkspaceWorkspaceIdUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV2ApiKeyResponse parses an HTTP response from a GetApiV2ApiKeyWithResponse call
func ParseGetApiV2ApiKeyResponse(rsp *http.Response) (*GetApiV2ApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV2ApiKeyResponse parses an HTTP response from a PostApiV2ApiKeyWithResponse call
func ParsePostApiV2ApiKeyResponse(rsp *http.Response) (*PostApiV2ApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2ApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV2ApiKeyApiKeyDataIdResponse parses an HTTP response from a DeleteApiV2ApiKeyApiKeyDataIdWithResponse call
func ParseDeleteApiV2ApiKeyApiKeyDataIdResponse(rsp *http.Response) (*DeleteApiV2ApiKeyApiKeyDataIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2ApiKeyApiKeyDataIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdMembershipsResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdMembershipsWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdMembershipsResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Memberships Memberships of organization
			Memberships *[]MembershipOrg `json:"memberships,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse parses an HTTP response from a DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithResponse call
func ParseDeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse(rsp *http.Response) (*DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Membership *MembershipOrg `json:"membership,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse parses an HTTP response from a PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdWithResponse call
func ParsePatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse(rsp *http.Response) (*PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2OrganizationsOrganizationIdMembershipsMembershipIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Membership *MembershipOrg `json:"membership,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV2OrganizationsOrganizationIdWorkspacesResponse parses an HTTP response from a GetApiV2OrganizationsOrganizationIdWorkspacesWithResponse call
func ParseGetApiV2OrganizationsOrganizationIdWorkspacesResponse(rsp *http.Response) (*GetApiV2OrganizationsOrganizationIdWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2OrganizationsOrganizationIdWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Workspaces Projects of organization
			Workspaces *[]Project `json:"workspaces,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse parses an HTTP response from a PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentWithResponse call
func ParsePostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse(rsp *http.Response) (*PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2SecretBatchCreateWorkspaceWorkspaceIdEnvironmentEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse parses an HTTP response from a PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithResponse call
func ParsePatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse(rsp *http.Response) (*PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2SecretBatchModifyWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse parses an HTTP response from a DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithResponse call
func ParseDeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse(rsp *http.Response) (*DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2SecretBatchWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV2SecretWorkspaceWorkspaceIdResponse parses an HTTP response from a GetApiV2SecretWorkspaceWorkspaceIdWithResponse call
func ParseGetApiV2SecretWorkspaceWorkspaceIdResponse(rsp *http.Response) (*GetApiV2SecretWorkspaceWorkspaceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2SecretWorkspaceWorkspaceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse parses an HTTP response from a PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameWithResponse call
func ParsePatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse(rsp *http.Response) (*PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse parses an HTTP response from a PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentWithResponse call
func ParsePostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse(rsp *http.Response) (*PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2SecretWorkspaceWorkspaceIdEnvironmentEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV2SecretSecretIdResponse parses an HTTP response from a DeleteApiV2SecretSecretIdWithResponse call
func ParseDeleteApiV2SecretSecretIdResponse(rsp *http.Response) (*DeleteApiV2SecretSecretIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2SecretSecretIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV2SecretSecretIdResponse parses an HTTP response from a GetApiV2SecretSecretIdWithResponse call
func ParseGetApiV2SecretSecretIdResponse(rsp *http.Response) (*GetApiV2SecretSecretIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2SecretSecretIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV2SecretsResponse parses an HTTP response from a DeleteApiV2SecretsWithResponse call
func ParseDeleteApiV2SecretsResponse(rsp *http.Response) (*DeleteApiV2SecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2SecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Secrets Deleted secrets
			Secrets *[]Secret `json:"secrets,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV2SecretsResponse parses an HTTP response from a GetApiV2SecretsWithResponse call
func ParseGetApiV2SecretsResponse(rsp *http.Response) (*GetApiV2SecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2SecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Secrets Secrets for the given project and environment
			Secrets *[]Secret `json:"secrets,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiV2SecretsResponse parses an HTTP response from a PatchApiV2SecretsWithResponse call
func ParsePatchApiV2SecretsResponse(rsp *http.Response) (*PatchApiV2SecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2SecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Secrets Updated secrets
			Secrets *[]Secret `json:"secrets,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV2SecretsResponse parses an HTTP response from a PostApiV2SecretsWithResponse call
func ParsePostApiV2SecretsResponse(rsp *http.Response) (*PostApiV2SecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2SecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Secrets Newly-created secrets for the given project and environment
			Secrets *[]Secret `json:"secrets,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV2ServiceTokenResponse parses an HTTP response from a GetApiV2ServiceTokenWithResponse call
func ParseGetApiV2ServiceTokenResponse(rsp *http.Response) (*GetApiV2ServiceTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2ServiceTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV2ServiceTokenResponse parses an HTTP response from a PostApiV2ServiceTokenWithResponse call
func ParsePostApiV2ServiceTokenResponse(rsp *http.Response) (*PostApiV2ServiceTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2ServiceTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiV2ServiceTokenServiceTokenDataIdResponse parses an HTTP response from a DeleteApiV2ServiceTokenServiceTokenDataIdWithResponse call
func ParseDeleteApiV2ServiceTokenServiceTokenDataIdResponse(rsp *http.Response) (*DeleteApiV2ServiceTokenServiceTokenDataIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2ServiceTokenServiceTokenDataIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV2UsersMeResponse parses an HTTP response from a GetApiV2UsersMeWithResponse call
func ParseGetApiV2UsersMeResponse(rsp *http.Response) (*GetApiV2UsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2UsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			User *CurrentUser `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV2UsersMeOrganizationsResponse parses an HTTP response from a GetApiV2UsersMeOrganizationsWithResponse call
func ParseGetApiV2UsersMeOrganizationsResponse(rsp *http.Response) (*GetApiV2UsersMeOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2UsersMeOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Organizations Organizations that user is part of
			Organizations *[]Organization `json:"organizations,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV2WorkspaceWorkspaceIdEncryptedKeyResponse parses an HTTP response from a GetApiV2WorkspaceWorkspaceIdEncryptedKeyWithResponse call
func ParseGetApiV2WorkspaceWorkspaceIdEncryptedKeyResponse(rsp *http.Response) (*GetApiV2WorkspaceWorkspaceIdEncryptedKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2WorkspaceWorkspaceIdEncryptedKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProjectKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse parses an HTTP response from a DeleteApiV2WorkspaceWorkspaceIdEnvironmentsWithResponse call
func ParseDeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse(rsp *http.Response) (*DeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2WorkspaceWorkspaceIdEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV2WorkspaceWorkspaceIdEnvironmentsResponse parses an HTTP response from a PostApiV2WorkspaceWorkspaceIdEnvironmentsWithResponse call
func ParsePostApiV2WorkspaceWorkspaceIdEnvironmentsResponse(rsp *http.Response) (*PostApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2WorkspaceWorkspaceIdEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutApiV2WorkspaceWorkspaceIdEnvironmentsResponse parses an HTTP response from a PutApiV2WorkspaceWorkspaceIdEnvironmentsWithResponse call
func ParsePutApiV2WorkspaceWorkspaceIdEnvironmentsResponse(rsp *http.Response) (*PutApiV2WorkspaceWorkspaceIdEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV2WorkspaceWorkspaceIdEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV2WorkspaceWorkspaceIdMembershipsResponse parses an HTTP response from a GetApiV2WorkspaceWorkspaceIdMembershipsWithResponse call
func ParseGetApiV2WorkspaceWorkspaceIdMembershipsResponse(rsp *http.Response) (*GetApiV2WorkspaceWorkspaceIdMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2WorkspaceWorkspaceIdMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Memberships Memberships of project
			Memberships *[]Membership `json:"memberships,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse parses an HTTP response from a DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithResponse call
func ParseDeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse(rsp *http.Response) (*DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Membership *Membership `json:"membership,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse parses an HTTP response from a PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdWithResponse call
func ParsePatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse(rsp *http.Response) (*PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV2WorkspaceWorkspaceIdMembershipsMembershipIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Membership *Membership `json:"membership,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV2WorkspaceWorkspaceIdSecretsResponse parses an HTTP response from a GetApiV2WorkspaceWorkspaceIdSecretsWithResponse call
func ParseGetApiV2WorkspaceWorkspaceIdSecretsResponse(rsp *http.Response) (*GetApiV2WorkspaceWorkspaceIdSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2WorkspaceWorkspaceIdSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV2WorkspaceWorkspaceIdSecretsResponse parses an HTTP response from a PostApiV2WorkspaceWorkspaceIdSecretsWithResponse call
func ParsePostApiV2WorkspaceWorkspaceIdSecretsResponse(rsp *http.Response) (*PostApiV2WorkspaceWorkspaceIdSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV2WorkspaceWorkspaceIdSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV2WorkspaceWorkspaceIdServiceTokenDataResponse parses an HTTP response from a GetApiV2WorkspaceWorkspaceIdServiceTokenDataWithResponse call
func ParseGetApiV2WorkspaceWorkspaceIdServiceTokenDataResponse(rsp *http.Response) (*GetApiV2WorkspaceWorkspaceIdServiceTokenDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV2WorkspaceWorkspaceIdServiceTokenDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
